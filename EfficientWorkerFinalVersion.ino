#include <WiFi.h>
#include <SPIFFS.h>
#include <ESPAsyncWebServer.h>
#include <Adafruit_Fingerprint.h>
#include <stdio.h>
#include <stdlib.h>
#include <sqlite3.h>
#include <SPI.h>
#include <FS.h>
#include <SD.h>
#include <AsyncTCP.h>
#include <TimeLib.h>
#include <time.h>

#define mySerial Serial2
#define diodaZaUlazak 2
#define diodaZaMrezu 4
#define brojKolona 100 // bilo sta ovde, ovo samo onako postavio
#define maxRadnika 100 //isto zavisi od broja ljudi..
#define maxRadnika 128

Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);
const char* ssid = "jasmin"; //sve je isto, samo se ovo mijenja.
const char* password = "jasmin1593";
uint8_t id;
bool diodaUpaljena = true;
bool posluzioEnroll = false;
int rc;
char sql[1024];
int upisivanje; //JOS JEDAN INDIKATOR AKO SE UPISUJUE ONDA JE 1 A AKO SE NE UPISUJE ONDA JE 0
int prekini_upisivanje = 1; //SLUZI DA BI PREKINULO UPISIVANJE U ODREDJENIM SLUCAJEVIMA 
sqlite3 *db1;
sqlite3_stmt *res;
const char *tail;

AsyncWebServer server(80);
AsyncWebSocket ws("/ws");

String log_info[brojKolona];
String db_row[brojKolona];
double satiPoZadatku = 0;

AsyncWebSocketClient * globalClient = NULL;

const char* data = "Callback function called";

//zipovani html fajlovi:
const uint8_t htmlEnroll[] = { 0x1f,0x8b,0x08,0x00,0x6e,0x6c,0x06,0x5e,0x00,0xff,0x9d,0x54,0x5f,0x6f,0xd3,0x30,0x10,0x7f,0xdf,0xa7,0x38,0xfc,0xd4,0x68,0x34,0xd9,0x0b,0x2f,0x5d,0xd2,0x07,0x60,0x12,0x48,0x43,0x4c,0xb0,0x09,0x21,0x84,0x90,0x1b,0x5f,0x12,0xb7,0xa9,0x1d,0xec,0x4b,0xb2,0x0e,0xf5,0xbb,0xcf,0x4e,0xd6,0xe5,0x8f,0x00,0x09,0x2c,0x45,0xbd,0xff,0xfe,0xdd,0xdd,0xcf,0x8d,0x5f,0xbc,0xfd,0xf8,0xe6,0xf6,0xeb,0xcd,0x15,0x14,0xb4,0x2f,0xd7,0x67,0x71,0xff,0x03,0x00,0x71,0x81,0x5c,0x74,0x92,0x57,0x2c,0x1d,0x4a,0x3c,0x69,0xee,0x6c,0xb4,0x38,0xc0,0xaf,0x41,0xf7,0x26,0x9e,0xee,0x72,0xa3,0x6b,0x25,0x96,0xa9,0x2e,0xb5,0x59,0x81,0xe0,0xc6,0x59,0x10,0xd5,0xe5,0x24,0x30,0xd3,0x8a,0x96,0x2d,0xca,0xbc,0xa0,0xd5,0x46,0x97,0x02,0xcd,0xd4,0xff,0x94,0xcd,0x15,0xc9,0x9f,0x35,0xb6,0x85,0x24,0xbc,0x1c,0xfb,0x87,0xe0,0xe3,0xd9,0x20,0x57,0x33,0x38,0x84,0xf7,0xb4,0xe4,0xa5,0xcc,0xd5,0x0a,0x52,0x54,0x34,0xbf,0xa5,0x43,0x61,0xe5,0x03,0xae,0xe0,0xd5,0x45,0x75,0x3f,0x72,0x1e,0x07,0xf1,0xd4,0x7e,0x34,0xe9,0x3f,0x26,0x49,0x4e,0xbb,0xab,0xa4,0x95,0x0d,0x57,0x5b,0x84,0xaa,0x26,0x25,0x77,0x3c,0x8e,0x7a,0xcf,0xf3,0xd4,0x52,0x23,0x2b,0x02,0x3a,0x54,0x08,0x09,0x30,0x0f,0x29,0xda,0xf2,0x86,0xf7,0x76,0x36,0x9a,0x67,0xc3,0x0d,0x94,0x3a,0xff,0x21,0x55,0xa6,0x5d,0xe8,0xb7,0xef,0x23,0x3c,0xde,0xb7,0xd7,0xdb,0xbb,0x4f,0xd7,0xbe,0x48,0x6b,0x57,0x51,0xc4,0xe0,0x1c,0x5a,0xa9,0x84,0x6e,0xc3,0x52,0xa7,0x9c,0xa4,0x56,0x61,0xa1,0x2d,0x39,0x33,0x8b,0x5a,0xcb,0x66,0xd9,0xad,0x75,0x99,0x0a,0x5b,0xf8,0x82,0x9b,0xcf,0x3a,0xdd,0x21,0x2d,0xfa,0x82,0xc1,0x2c,0xd0,0x60,0x8a,0xb2,0x41,0xe1,0xc2,0x2f,0x5e,0xba,0x45,0xd4,0x7e,0x6e,0x5e,0x99,0xc3,0xb1,0x39,0x24,0x8c,0x0d,0x6b,0x19,0xdc,0xad,0x0d,0xb5,0xda,0xa3,0xb5,0x3c,0xf7,0x4d,0x67,0xb5,0x4a,0x3d,0xbc,0x05,0x36,0x14,0x4c,0x56,0xd4,0xd5,0x00,0x67,0x0e,0x05,0x27,0x3e,0x5e,0x8e,0xcc,0xc0,0x87,0x77,0x76,0x48,0x5c,0xcf,0x06,0x85,0x74,0xd0,0x88,0x05,0xf3,0xae,0x1d,0x8a,0x28,0xd3,0x66,0xef,0x5a,0xf6,0x28,0xfe,0x56,0x24,0x64,0xc1,0x84,0x00,0xee,0x08,0x9d,0xd6,0x7b,0xc7,0x8d,0x30,0x47,0xba,0x2a,0xd1,0x8b,0xaf,0x0f,0xef,0xc5,0xa2,0xdb,0x14,0x0b,0x42,0xa9,0x14,0x9a,0x77,0xb7,0x1f,0xae,0xe1,0xbc,0x2b,0x30,0xa1,0xe1,0xac,0x6f,0xc0,0xd2,0xe2,0x1f,0x9d,0xff,0x78,0x5d,0xe2,0xa7,0xf3,0x9b,0xe9,0x1e,0x4f,0x63,0x72,0x8c,0xec,0x38,0xd4,0x3f,0xd5,0xa8,0x7f,0xab,0x9d,0xec,0x5f,0xe6,0x33,0x01,0x37,0x66,0xfd,0x3f,0xdf,0x29,0xbd,0x02,0x29,0x92,0x1e,0xdd,0xfa,0xc6,0xd1,0x8b,0x37,0x12,0x2a,0xe3,0x68,0xa6,0x38,0x58,0x54,0x0f,0xda,0x84,0xc3,0x89,0xa3,0xea,0x09,0x4d,0x0f,0xc1,0xa1,0xf2,0xff,0x25,0x8f,0xbb,0xd6,0xd3,0xbe,0x62,0x04,0x00,0x00
};

const uint8_t htmlNajefikasniji[] = { 0x1f,0x8b,0x08,0x00,0xf8,0x28,0x09,0x5e,0x00,0xff,0x95,0x56,0x6d,0x6f,0xdb,0x36,0x10,0xfe,0x9e,0x5f,0xc1,0x29,0x18,0xe0,0xa2,0x96,0x1d,0x7b,0x1b,0x50,0x38,0x56,0x80,0x2c,0x6d,0xd1,0x02,0x0d,0x36,0xb4,0x0e,0xba,0x17,0xf4,0x03,0x2d,0x9e,0x25,0xc6,0x14,0xa9,0x91,0x27,0x2b,0xe9,0x96,0xff,0xde,0xa3,0x24,0xc7,0x92,0x62,0xd7,0x19,0xfd,0x41,0x24,0xef,0xb9,0xe3,0xbd,0xf1,0xa1,0xe7,0x3f,0xbc,0xfe,0xed,0x6a,0xf1,0xe7,0xef,0x6f,0x58,0x8a,0x99,0xba,0x38,0x99,0xfb,0x0f,0x53,0x5c,0x27,0x51,0x00,0x3a,0xf0,0x1b,0xc0,0xc5,0xc5,0x09,0xa3,0x31,0xcf,0x00,0x39,0x8b,0x53,0x6e,0x1d,0x60,0x14,0xdc,0x2c,0xde,0x86,0xaf,0x08,0xb1,0x13,0x69,0x9e,0x41,0x14,0x6c,0x24,0x94,0xb9,0xb1,0x18,0xb0,0xd8,0x68,0x04,0x4d,0xd0,0x52,0x0a,0x4c,0x23,0x01,0x1b,0x19,0x43,0x58,0x2d,0x86,0x4c,0x6a,0x89,0x92,0xab,0xd0,0xc5,0x5c,0x41,0x34,0x19,0x9d,0x75,0x4c,0xa5,0x88,0x79,0x08,0xff,0x14,0x72,0x13,0x05,0x7f,0x84,0x37,0x97,0xe1,0x95,0xc9,0x72,0x8e,0x72,0xa9,0xa0,0x65,0x57,0x42,0x04,0x22,0x81,0xad,0x26,0x4a,0x54,0x70,0x71,0x6d,0x1c,0x32,0x58,0xad,0x64,0x2c,0x09,0xc4,0x4a,0x63,0xd7,0x60,0x1d,0x0b,0x19,0x72,0xd2,0x9e,0x8f,0x6b,0xd4,0x49,0xad,0xe2,0xf0,0xde,0x2f,0xfc,0xdc,0x8f,0xa5,0x11,0xf7,0xec,0xdf,0xc7,0x65,0xb5,0xc5,0xe3,0x75,0x62,0x4d,0xa1,0x45,0x18,0x1b,0x65,0xec,0x8c,0x21,0x70,0x75,0xde,0xc1,0xac,0xc8,0xa1,0xb0,0x04,0x99,0xa4,0x38,0x23,0x1b,0x4a,0x80,0xdd,0x01,0x1e,0xea,0xa3,0xfc,0x48,0xa7,0x3d,0xe3,0x08,0x77,0x18,0x72,0x25,0x13,0x3d,0x63,0x31,0x79,0xdb,0xd6,0xf3,0xa3,0x39,0xb1,0x4c,0x25,0x82,0xcb,0xcc,0x1a,0xf6,0x9a,0x3d,0xcd,0xcc,0x2d,0x5f,0xf0,0x25,0x28,0xde,0xb3,0xff,0x5d,0xc7,0x1e,0x01,0x2b,0x9e,0x49,0x75,0x3f,0x63,0xc1,0xc2,0xc2,0xb2,0x88,0x53,0x40,0x76,0xfd,0x29,0x18,0xb2,0x4b,0x4b,0x05,0x1a,0xb2,0x77,0xa0,0x36,0x80,0x32,0xe6,0x43,0xe6,0xb8,0x76,0xa1,0x03,0x2b,0x57,0x5d,0x33,0x4b,0x63,0xc9,0xb4,0x4f,0x90,0xe2,0xb9,0x03,0x0a,0xa6,0x99,0x75,0x61,0x55,0xe9,0x67,0xec,0xd5,0xd9,0x8f,0xdd,0xfd,0x8c,0xdb,0x44,0xea,0x50,0xc1,0x8a,0xdc,0x9c,0x1c,0x90,0xda,0x3a,0x8a,0x8e,0xf8,0x61,0x3b,0xd9,0x9f,0x0c,0x14,0xc3,0xee,0x3a,0xfd,0xbf,0xf9,0xa9,0x03,0x9b,0x4d,0xf2,0x3b,0xe6,0x8c,0x92,0x82,0x9d,0x0a,0x21,0xba,0x90,0x9c,0x0b,0x21,0x75,0x42,0x61,0xe5,0x77,0xed,0xf2,0xec,0x75,0xc8,0x1e,0xed,0xae,0xaa,0xd6,0x7b,0xbb,0x60,0xa9,0x08,0x7c,0xb4,0x01,0xd0,0xce,0x34,0xa6,0x61,0x9c,0x4a,0x25,0x06,0xb0,0x01,0xfd,0xe2,0xe8,0x91,0xa7,0xab,0xa9,0xff,0x3d,0xc7,0x74,0x6a,0x36,0x70,0x3c,0x86,0x6e,0x92,0x0e,0x59,0xeb,0x17,0xa3,0x49,0x64,0x88,0x26,0x9f,0x4d,0xa6,0xed,0x64,0xb6,0xa5,0x4b,0x83,0x68,0x32,0xea,0x83,0x27,0x88,0xf6,0x65,0xf2,0xad,0xd4,0xab,0xe4,0x53,0x2f,0x7f,0xbe,0xba,0x7c,0xfb,0xcb,0xd9,0xb1,0x1b,0xd7,0x96,0xf6,0xca,0x3b,0x1f,0x37,0xfc,0x31,0x1f,0xd7,0x34,0x39,0xf7,0x04,0xd2,0xb0,0x11,0x5d,0x76,0x29,0xa2,0xc0,0x88,0xc4,0x6c,0x8c,0x0d,0x0e,0xf1,0xd2,0x12,0x56,0xc6,0x02,0x51,0x2e,0x49,0x51,0x66,0xc0,0x2c,0x10,0xbd,0xa2,0xef,0x28,0xb2,0x3a,0xdd,0x12,0x55,0x45,0x5e,0x95,0xc1,0x5d,0x0a,0x83,0xa6,0x3d,0xa3,0x80,0x72,0xd1,0xf4,0x67,0xd5,0x24,0x0d,0x21,0xd6,0x8a,0x76,0xb7,0xd8,0x6d,0xa6,0x17,0x9f,0xab,0xf3,0xd9,0xfb,0xd7,0xc4,0x88,0xe9,0x7e,0xc8,0x07,0xef,0x93,0x27,0xf5,0xc3,0x90,0xb7,0xd2,0x1e,0xc5,0x5c,0x52,0xcb,0xf0,0x04,0x58,0x6a,0x0a,0x8a,0x37,0xa7,0x43,0x91,0xbb,0x75,0x17,0x4f,0xab,0x96,0x9f,0x73,0xdc,0xe5,0xb1,0x91,0xd6,0x1b,0x4d,0xd6,0xab,0x64,0x34,0x69,0x76,0xb1,0x95,0x39,0xee,0xb0,0x8a,0xd8,0x8b,0xe4,0xbe,0xc3,0x22,0x26,0x4c,0x5c,0x64,0x94,0xed,0x51,0x02,0xf8,0x46,0x81,0x9f,0xfe,0x7a,0xff,0x5e,0x0c,0xda,0x49,0x7c,0xb1,0x6b,0x00,0xaf,0x5b,0xc2,0xf2,0x93,0x89,0xd7,0x80,0x37,0x1f,0x3f,0x90,0x85,0xa0,0x74,0xb3,0xf1,0x38,0x60,0x2f,0x89,0xbc,0xb4,0x30,0xe5,0x48,0x99,0x98,0xde,0x21,0xa3,0x47,0xa9,0xaf,0xe7,0x4b,0x16,0x8c,0x4b,0x17,0x1c,0x30,0x41,0xfa,0x1a,0x4a,0xf6,0x79,0xbb,0x1e,0xb4,0x8d,0xf7,0xce,0x6d,0xfa,0xe4,0x7b,0x4e,0x6f,0x5b,0xa9,0xa5,0x49,0x4f,0x21,0xd5,0x1d,0xc8,0xab,0xa4,0x67,0xfc,0x29,0x33,0x3e,0xca,0x47,0x46,0x67,0xe0,0x9c,0xaf,0x49,0xc4,0x56,0x85,0x8e,0x7d,0x3c,0x03,0x7a,0xb3,0x8b,0x35,0x27,0xb6,0xd8,0xdb,0xf0,0x5b,0x37,0xbf,0xf2,0x5c,0x3a,0x52,0xab,0xd1,0x23,0xc1,0x91,0x8f,0x5c,0xae,0x24,0x0e,0x82,0xff,0xda,0x8e,0xf9,0x31,0x1e,0x37,0x1e,0x8f,0xa4,0xd6,0x60,0xdf,0x2d,0xae,0x7d,0x46,0x5b,0x9a,0xe7,0xf4,0x2a,0x0b,0x7a,0x72,0x12,0xe2,0xf7,0x84,0xe5,0x85,0xcd,0x8d,0x03,0x37,0xea,0x18,0x11,0x46,0xf0,0xdb,0x9b,0xaa,0x56,0xc5,0xa0,0x3a,0xbd,0x75,0xca,0xc3,0xf9,0xc9,0x2e,0xbe,0x6d,0x24,0x5d,0x95,0xd4,0x88,0xaf,0x52,0xff,0x55,0x29,0xf6,0x08,0xc7,0xc7,0x63,0x41,0x90,0x4f,0x75,0xc3,0x90,0x9b,0xf4,0xb6,0xe1,0x47,0x53,0x0e,0x26,0xbd,0x50,0x3c,0x54,0x12,0x90,0xe0,0x0d,0xea,0x0a,0x94,0x1a,0x84,0xfb,0x70,0x39,0x5d,0xe7,0xe7,0x21,0x65,0xf6,0x4c,0xe0,0xc6,0xca,0x5b,0x6a,0x84,0x03,0xe8,0x0e,0x5c,0x76,0x92,0xdd,0x8a,0xfe,0xef,0xb3,0x2f,0x3d,0x46,0xb5,0x70,0x10,0x3b,0xe9,0x61,0x65,0x76,0x10,0x3a,0xed,0x41,0x1b,0x5f,0x0f,0xe2,0x7f,0xfa,0xe2,0x6f,0x4d,0xcd,0x06,0x74,0x93,0xdd,0xba,0x75,0x7b,0xf6,0x73,0x6c,0x73,0xc3,0xe7,0xe3,0x9a,0x04,0x88,0x16,0xfd,0x7f,0xd5,0x6f,0xa0,0x79,0x01,0x0a,0xbb,0x0a,0x00,0x00
};

const uint8_t htmlForma[] = { 0x1f,0x8b,0x08,0x00,0x3b,0xa9,0x0c,0x5e,0x00,0xff,0xed,0x5a,0x6b,0x6f,0xdb,0x36,0x14,0xfd,0xde,0x5f,0xc1,0xa9,0x18,0xba,0x0d,0x51,0xf3,0x40,0x52,0xac,0xae,0x6d,0xac,0x4b,0x13,0x74,0xd8,0xda,0x66,0x7d,0x6c,0x6b,0x87,0x7e,0xa0,0xa5,0x6b,0x8b,0xb1,0x24,0x6a,0x24,0xe5,0xc4,0x29,0xf6,0xdf,0x7b,0x29,0xc9,0x7a,0xd0,0x92,0xed,0x38,0x7e,0xb5,0x9b,0x0d,0xf8,0x21,0xbe,0x0e,0xcf,0xbd,0xbc,0xe7,0x92,0x52,0xfb,0x9b,0x67,0xaf,0x4e,0xdf,0xbe,0xbf,0x38,0x23,0x9e,0x0a,0xfc,0xee,0xbd,0xb6,0xfe,0x22,0x3e,0x0d,0x07,0x1d,0x0b,0x42,0x4b,0x5f,0x00,0xea,0x76,0xef,0x11,0x7c,0xb5,0x03,0x50,0x94,0x38,0x1e,0x15,0x12,0x54,0xc7,0x7a,0xf7,0xf6,0xdc,0xfe,0x11,0x6b,0x14,0x45,0x21,0x0d,0xa0,0x63,0x8d,0x18,0x5c,0x45,0x5c,0x28,0x8b,0x38,0x3c,0x54,0x10,0x62,0xd5,0x2b,0xe6,0x2a,0xaf,0xe3,0xc2,0x88,0x39,0x60,0x27,0x7f,0xf6,0x08,0x0b,0x99,0x62,0xd4,0xb7,0xa5,0x43,0x7d,0xe8,0x1c,0x3e,0x3c,0xa8,0x74,0xe5,0x29,0x15,0xd9,0xf0,0x4f,0xcc,0x46,0x1d,0xeb,0x2f,0xfb,0xdd,0x53,0xfb,0x94,0x07,0x11,0x55,0xac,0xe7,0x43,0xa9,0x5f,0x06,0x1d,0x70,0x07,0x30,0x69,0xa9,0x98,0xf2,0xa1,0x7b,0xd6,0xef,0x33,0x87,0x61,0xf9,0x9f,0x5c,0x0c,0x41,0xb4,0xde,0x28,0x2a,0x14,0x0b,0x07,0x24,0xa2,0x03,0x68,0xef,0xa7,0x95,0xd2,0x06,0x52,0x8d,0x27,0xbf,0xf5,0xeb,0x07,0xf2,0x29,0xff,0xad,0x5f,0x3d,0x7e,0x6d,0x4b,0x76,0x83,0x6d,0x5b,0xf8,0x5b,0xb8,0x20,0x6c,0xbc,0xf4,0x24,0xaf,0xf3,0xef,0xbd,0xfc,0x67,0x8f,0xbb,0x63,0xb3,0x35,0x75,0x86,0x03,0xc1,0xe3,0xd0,0xb5,0x1d,0xee,0x73,0xd1,0x72,0xa9,0x18,0x0e,0x3d,0x3a,0x64,0x4f,0xca,0xd5,0x9a,0x5e,0x75,0xa3,0x78,0x47,0xc6,0x18,0x0a,0xae,0x95,0x4d,0x7d,0x36,0x08,0x5b,0xc4,0xc1,0x29,0x83,0x78,0x52,0x34,0xd4,0xaf,0x74,0x64,0x72,0xe5,0x31,0x05,0x05,0x70,0xfd,0xea,0x23,0x89,0x76,0x9f,0x06,0xcc,0x1f,0xb7,0xc8,0x83,0x53,0x1e,0x0b,0x06,0x82,0xbc,0x84,0xab,0x07,0x7b,0x24,0xfb,0xb7,0x47,0x02,0x1e,0x72,0x19,0x51,0xa7,0xd4,0xb6,0x04,0x87,0x85,0x51,0xac,0xfe,0x56,0xe3,0x08,0x3a,0x11,0x95,0xf2,0x0a,0x29,0xfa,0xa8,0x0d,0x9b,0x5f,0xd5,0xf0,0xaa,0x57,0xc2,0x38,0xe8,0x81,0xc0,0x6b,0x12,0x7c,0x70,0xd4,0x5e,0x32,0x03,0x2a,0x80,0x1a,0x13,0x4b,0x9c,0xa4,0x45,0x0e,0x0f,0x0e,0xbe,0xad,0xc2,0x8e,0xa8,0xeb,0x26,0x06,0x39,0x3c,0x8a,0x4a,0xa6,0x48,0x6d,0xa0,0x4d,0x84,0x25,0xd1,0x35,0x91,0xdc,0x67,0x2e,0xb9,0xef,0x38,0x4e,0x5d,0x1d,0x5b,0x50,0x97,0xc5,0xb2,0x45,0x8e,0xcd,0x3e,0x04,0xa0,0xc1,0xa1,0x45,0x46,0x80,0x3e,0x83,0x9e,0x59,0x3b,0x6f,0x9f,0xf6,0xc0,0x37,0x00,0x57,0x70,0x95,0x3e,0x0e,0xaa,0xfd,0xbb,0x4c,0x46,0x3e,0x45,0xc6,0x59,0xe8,0xb3,0x10,0xec,0x9e,0xcf,0x9d,0x61,0xe2,0x0f,0x73,0x08,0x96,0x71,0x2f,0x60,0xea,0x23,0xf9,0x54,0xeb,0x23,0x89,0xa9,0x7d,0xa0,0x38,0xfb,0x1e,0x57,0x5e,0xc5,0xc1,0x66,0x3b,0x25,0xb9,0x7f,0x7c,0xfa,0xf4,0xfc,0xc4,0x80,0xd9,0xec,0x36,0xd5,0x79,0x1e,0x1d,0x34,0x19,0x21,0xe4,0xa1,0xd1,0x72,0x1e,0xf5,0x4e,0x2c,0xa4,0x1e,0x34,0xe2,0x2c,0x71,0xe4,0xaa,0xb7,0xfa,0x9c,0xaa,0x16,0x11,0x6c,0xe0,0xa9,0xb2,0x4d,0xa6,0x26,0x39,0x4d,0x59,0xcb,0xe3,0x68,0xcd,0x79,0x8b,0x13,0x79,0x38,0xa1,0x07,0xc7,0x8f,0x67,0x76,0xfe,0x50,0xf0,0xab,0x16,0xed,0x23,0x3a,0xa3,0xbb,0x2c,0x22,0xb5,0x88,0x65,0x35,0xd8,0x5b,0x51,0x0c,0x5d,0xc6,0x84,0x4b,0x06,0xab,0xb3,0xfe,0x43,0xdd,0x2b,0x45,0x2f,0x11,0x87,0xc6,0x70,0x01,0x15,0x03,0x16,0xda,0x3e,0xf4,0x71,0xc8,0x13,0x63,0x85,0x64,0x85,0x09,0x55,0xd3,0xa5,0xd9,0xc2,0x7a,0x6c,0xae,0x2b,0xc3,0x3a,0x27,0x53,0x76,0x9d,0x26,0xac,0x7f,0xa4,0xdf,0x0d,0xee,0x31,0xed,0x19,0xf5,0xae,0x5f,0x3b,0xf1,0x48,0x8c,0xe8,0xaf,0x38,0x4a,0x68,0x86,0x85,0xcc,0x0d,0xf4,0xc4,0x6b,0xa7,0x75,0x6c,0x4e,0x2b,0x23,0x43,0xf1,0x08,0x21,0x99,0x88,0xb2,0x42,0x34,0x80,0xe2,0x81,0x31,0xe7,0x32,0x1c,0x57,0xc4,0x83,0xe5,0xf0,0x3c,0x9a,0x85,0xe7,0xd1,0x1c,0x3c,0x95,0xf2,0x12,0x9e,0x9f,0x02,0x70,0x19,0x25,0xd2,0x11,0x00,0x21,0xa1,0xa1,0x4b,0xbe,0x0b,0xe8,0x75,0xaa,0xab,0xd8,0xea,0x18,0x99,0xff,0xde,0xc0,0x59,0x62,0x74,0xaf,0x32,0x9f,0x4a,0x70,0xce,0x63,0x4c,0xa5,0xed,0xcc,0x70,0x6c,0xce,0xc9,0x88,0x23,0xc5,0x1a,0x4a,0x7f,0xb5,0xf7,0x33,0xc9,0x6d,0xef,0xa7,0x79,0x45,0x5b,0x0b,0x67,0xa6,0xc6,0xde,0x51,0xf7,0xf7,0x18,0xc4,0x98,0xa0,0x90,0xa0,0x70,0x3f,0x90,0x04,0x32,0x29,0x77,0xc6,0x28,0x57,0x02,0xe3,0xae,0x54,0x5a,0x92,0x10,0x0a,0xb6,0x3f,0xca,0x9a,0xb9,0x6c,0x84,0x4b,0x09,0xf5,0xa7,0x63,0x15,0x0b,0x26,0x4b,0x09,0x92,0x0a,0xd8,0x34,0x20,0xd4,0x51,0x8c,0x87,0x1d,0x6b,0x7f,0x24,0x30,0x8d,0x38,0xeb,0xb3,0x21,0x95,0x21,0xe6,0x12,0xcc,0xed,0x58,0x4a,0x80,0x43,0xcf,0xb1,0x16,0x2d,0x35,0x33,0xfb,0x16,0xe0,0x1a,0xa5,0x66,0x8d,0x82,0xe3,0x9a,0x8a,0x49,0xe5,0x54,0x38,0x10,0x4f,0xc7,0xa2,0x3d,0xc7,0xea,0xbe,0xa0,0xd7,0x2c,0x88,0x03,0xe2,0xa1,0xde,0x4a,0x12,0x61,0x58,0x51,0x54,0x0e,0x71,0x72,0x49,0xc5,0x9a,0xd1,0xf6,0x71,0xb8,0xf4,0xf2,0x4c,0x24,0x25,0x03,0x67,0x50,0xea,0xf1,0x24,0xb6,0x27,0x89,0xed,0x2d,0x2d,0xc4,0x29,0x1d,0x1a,0x5a,0x96,0xcb,0x41,0xca,0x13,0x97,0x58,0x84,0x8b,0xd7,0x01,0x8f,0xfb,0x18,0x26,0x3a,0xd6,0xf3,0x0a,0xe2,0x3a,0x62,0x12,0xa8,0x8d,0x49,0x4d,0x69,0x36,0x1b,0x65,0x3c,0xcd,0x09,0xc9,0x2f,0xcf,0x76,0x88,0x64,0xe6,0x1a,0xe4,0xe6,0x20,0xbf,0x14,0x5e,0xb1,0xbf,0xdf,0xf4,0xda,0xd4,0xf3,0xd9,0x01,0x62,0x91,0xcf,0x94,0xd9,0x48,0xc0,0x0d,0x0b,0x70,0x95,0x57,0xe8,0xcd,0xa1,0x7e,0x19,0xf4,0xba,0x9a,0xde,0x73,0x26,0x76,0x85,0x5f,0x8d,0x67,0xe2,0xb9,0x53,0xdc,0x16,0x38,0xef,0x44,0xee,0xf4,0xf5,0xf9,0x04,0x97,0xe1,0xa6,0x4a,0x66,0x91,0x11,0xf5,0x63,0xfc,0x9b,0xca,0x8a,0x4b,0x31,0x09,0xa3,0x12,0x91,0x2d,0x00,0xa1,0xb1,0x4a,0x7b,0x5f,0xeb,0x49,0xb7,0xdd,0x13,0x99,0xfe,0x94,0xdc,0xa1,0x46,0xc2,0x12,0xb9,0xf2,0xc7,0xc4,0x63,0x52,0x71,0x2c,0xe0,0xfd,0x92,0xaa,0x65,0x32,0xb6,0x94,0x8e,0x15,0xbd,0x3c,0x4f,0xbb,0xde,0xb2,0x96,0xfd,0x1f,0x59,0xd7,0xc3,0xeb,0x2e,0x05,0xd6,0xaf,0x2a,0xae,0x26,0xb2,0xb5,0x43,0x71,0xb5,0xa4,0x5b,0x6b,0x8b,0xab,0x9b,0x15,0xad,0x17,0x59,0xaa,0xbe,0x05,0x5e,0xd3,0x73,0xa6,0x69,0xc5,0x0a,0x2e,0x41,0x02,0xfa,0x71,0x85,0xdc,0x04,0xe7,0x17,0xc4,0xeb,0x7b,0x7d,0x6e,0xb0,0x53,0xb4,0x0e,0x38,0xee,0xfa,0xa9,0x41,0xab,0x86,0xf9,0x5f,0xcd,0x02,0xce,0x42,0xc1,0x7d,0x92,0xc9,0x0d,0x9e,0x67,0x71,0xa2,0x3c,0x20,0x72,0x2c,0x15,0x04,0xa9,0xea,0x17,0x4d,0x17,0x13,0x7e,0x3c,0x16,0xf7,0x38,0xd2,0x7e,0xf1,0xea,0xcd,0x5b,0xab,0x48,0x03,0xf0,0xbc,0xe5,0x1c,0x0f,0x5c,0xd0,0x28,0x1b,0x93,0xfb,0x21,0x56,0xba,0x9d,0x2a,0x2d,0xee,0x82,0x0b,0x06,0x4b,0x84,0xd0,0xa4,0x3d,0x55,0x89,0x7a,0x4d,0xdd,0x10,0xb7,0xb0,0xb9,0x0f,0xdc,0xc5,0x1f,0x9b,0x8b,0x97,0xe6,0x7a,0xe6,0xc1,0x7f,0x63,0x10,0xa0,0xd8,0xf2,0x96,0xc2,0xb5,0x72,0x0b,0x68,0x10,0x8d,0x12,0x55,0xc8,0xd8,0xc2,0xfc,0x1b,0x21,0x74,0x1a,0xf9,0x92,0x6b,0x3f,0x6b,0xd1,0x8b,0xf1,0x4c,0x2d,0xcc,0x61,0xbc,0xd4,0xf3,0x30,0xfa,0xaf,0x0e,0x99,0x2d,0xf0,0xf2,0xe2,0x6e,0xc8,0xf0,0xf5,0x01,0x88,0x5c,0x6e,0x4d,0xe7,0xab,0x38,0x8e,0x98,0xfa,0x99,0xde,0xb0,0x0b,0xae,0xc3,0x93,0xe6,0x4b,0x73,0xac,0x3d,0x65,0xd3,0xa9,0xfc,0x6d,0x13,0xf9,0x15,0x39,0x56,0x45,0x58,0x26,0xfe,0x83,0x69,0x7a,0xd5,0xc5,0xee,0x98,0xb7,0xaf,0x61,0x01,0xcf,0x25,0xb4,0xb7,0xf5,0x58,0xd9,0xfb,0x9a,0xb2,0x76,0xdc,0x10,0x6d,0x3b,0xf2,0x15,0xbb,0xcb,0x75,0x9e,0x7e,0x6c,0xda,0x4f,0xb1,0xb3,0x67,0x78,0x73,0x66,0x4b,0x4b,0x3e,0x4f,0x24,0x5d,0x8a,0x41,0xba,0xc2,0x29,0xa2,0xba,0xab,0x68,0x6f,0x85,0x50,0x74,0x81,0xc5,0xf7,0x3f,0x2b,0x77,0xd2,0x5c,0x83,0xd7,0xb3,0xe1,0xd9,0x1a,0xab,0x78,0xab,0x61,0xe1,0xdd,0xcf,0x1a,0xfc,0x74,0xb8,0xd6,0x0d,0xcf,0x22,0x8f,0x85,0x24,0x4d,0xd7,0xb8,0x29,0x5a,0x34,0xef,0x6d,0xca,0x8f,0x30,0x03,0x4a,0xb2,0xa0,0x3c,0x5b,0x7a,0x8d,0x4f,0xf1,0x00,0x46,0x45,0x7d,0x03,0x0f,0x9f,0xae,0x00,0x95,0x3c,0x8b,0xa3,0x93,0x26,0xfc,0xeb,0xe0,0x5d,0xe7,0x72,0xee,0xb4,0x54,0xf2,0x74,0x43,0x3d,0x75,0x09,0xa3,0x0f,0xf4,0xb5,0xee,0x9e,0x09,0x1a,0x5e,0x66,0x37,0xf6,0x12,0x4b,0x6f,0x38,0x83,0x1a,0xa2,0x8b,0x92,0x8b,0xec,0x71,0x98,0xed,0xec,0xd2,0x27,0x0f,0xe3,0x64,0x3e,0x9b,0x3b,0xad,0x64,0x7d,0x61,0xfa,0xec,0x04,0x69,0x73,0x62,0xbe,0xfe,0x8d,0xf9,0x9b,0xf4,0xef,0x3a,0x36,0xe4,0xc5,0x72,0x29,0x32,0x77,0xd0,0x7b,0x73,0x1f,0xdc,0x2c,0x85,0x5f,0x45,0xee,0xfe,0x01,0x4d,0x24,0x98,0xc4,0xad,0x4e,0xe5,0x96,0xb2,0xe0,0x9b,0x3d,0x86,0xdf,0x85,0xe4,0x3d,0x4f,0x37,0x99,0x3b,0xe1,0x64,0xf1,0x2c,0x7e,0x05,0x9b,0xc0,0xa5,0xd9,0xbb,0xf5,0x59,0xfb,0xea,0xf7,0xd4,0xe6,0x01,0xfb,0x84,0xc0,0xe6,0xd3,0x8e,0x5d,0x24,0xf2,0xf6,0xc7,0xea,0xab,0x67,0xb2,0x7c,0x94,0xde,0xc4,0x62,0x39,0x5b,0x5f,0xe8,0x20,0x66,0x65,0xd4,0xae,0x4e,0x8f,0x67,0xe2,0x9e,0x19,0x13,0xe7,0x09,0x34,0x12,0x27,0x93,0x87,0x8b,0xd2,0xd5,0xad,0x6f,0x5c,0x9a,0x27,0x1d,0x4b,0x85,0xcb,0x64,0x88,0xf8,0xf2,0x0f,0x01,0x01,0xe8,0x0c,0x2a,0xd9,0x52,0x81,0x1a,0x09,0xb5,0xf1,0x78,0x39,0xb0,0xba,0xb7,0x12,0xea,0x15,0xb9,0x69,0x55,0x9e,0x11,0x45,0x59,0x9e,0x57,0xa6,0xcf,0x77,0x74,0xc7,0x14,0xd2,0x94,0x44,0x2f,0x21,0xc9,0x53,0xae,0xd7,0xde,0x4f,0x1f,0xfa,0x42,0x47,0xd2,0xcf,0x9c,0x7f,0x06,0x1a,0xd5,0x8e,0xda,0x83,0x2e,0x00,0x00
};

const uint8_t htmlZapisi[] = { 0x1f,0x8b,0x08,0x00,0x1b,0x2a,0x09,0x5e,0x00,0xff,0x95,0x57,0x6d,0x6f,0xdb,0x36,0x10,0xfe,0x9e,0x5f,0xc1,0x29,0x18,0xe6,0xa2,0x91,0x1c,0x67,0xed,0x50,0xa8,0x76,0x80,0x2c,0x6d,0xd0,0x00,0x2d,0x36,0xa4,0x0e,0xba,0x17,0xec,0x03,0x2d,0x9e,0x25,0xc6,0x14,0xa9,0x91,0x94,0x95,0x64,0xcb,0x7f,0xef,0x51,0x92,0xad,0x97,0x5a,0xb1,0x4b,0x03,0x36,0x29,0x3e,0xf7,0xdc,0x2b,0x8f,0xf2,0xf4,0x87,0x77,0xbf,0x5d,0xce,0xff,0xfc,0xfd,0x3d,0x49,0x6c,0x2a,0xce,0x8f,0xa6,0xee,0x87,0x08,0x2a,0xe3,0x99,0x07,0xd2,0x73,0x0f,0x80,0xb2,0xf3,0x23,0x82,0x63,0x9a,0x82,0xa5,0x24,0x4a,0xa8,0x36,0x60,0x67,0xde,0xed,0xfc,0xca,0x7f,0x83,0x88,0x66,0x4b,0xd2,0x14,0x66,0xde,0x9a,0x43,0x91,0x29,0x6d,0x3d,0x12,0x29,0x69,0x41,0x22,0xb4,0xe0,0xcc,0x26,0x33,0x06,0x6b,0x1e,0x81,0x5f,0x2e,0x4e,0x08,0x97,0xdc,0x72,0x2a,0x7c,0x13,0x51,0x01,0xb3,0x49,0x70,0xda,0xa1,0x4a,0xac,0xcd,0x7c,0xf8,0x37,0xe7,0xeb,0x99,0xf7,0x87,0x7f,0x7b,0xe1,0x5f,0xaa,0x34,0xa3,0x96,0x2f,0x04,0xb4,0x78,0x39,0xcc,0x80,0xc5,0xb0,0x91,0xb4,0xdc,0x0a,0x38,0xff,0xa2,0xf4,0x0a,0xf4,0x4f,0x86,0x58,0x6a,0x56,0x44,0x43,0xa4,0x34,0x33,0xd3,0x71,0xb5,0x79,0x54,0x21,0x8d,0x7d,0x70,0x0b,0x37,0x77,0x63,0xa1,0xd8,0x03,0xf9,0x6f,0xbb,0x2c,0x1f,0xd1,0x68,0x15,0x6b,0x95,0x4b,0xe6,0x47,0x4a,0x28,0x1d,0x12,0x0b,0x54,0xbc,0xed,0x60,0x96,0x68,0x87,0x5f,0x00,0x8f,0x13,0x1b,0x22,0x87,0x60,0xa0,0x1b,0xc0,0x53,0xa5,0xca,0x8d,0xe4,0xac,0x47,0x6e,0xe1,0xde,0xfa,0x54,0xf0,0x58,0x86,0x24,0x42,0x4f,0xda,0x72,0x6e,0xd4,0x1a,0x8b,0x84,0x5b,0x30,0xa9,0x5a,0xc1,0x4e,0xda,0xe3,0x54,0xdd,0xd1,0x39,0x5d,0x80,0xa0,0x3d,0xfe,0x67,0x0d,0xdb,0x02,0x96,0x34,0xe5,0xe2,0x21,0x24,0xde,0x5c,0xc3,0x22,0x8f,0x12,0xb0,0xe4,0xd3,0x67,0xef,0x84,0x5c,0x68,0xcc,0xcb,0x09,0xf9,0x00,0x62,0x0d,0x96,0x47,0xf4,0x84,0x18,0x2a,0x8d,0x6f,0x40,0xf3,0x65,0x97,0x66,0x81,0xa1,0x05,0xed,0x02,0x24,0x68,0x66,0x00,0x9d,0xa9,0x67,0x5d,0x58,0x99,0xf1,0x90,0xbc,0x39,0xfd,0xb1,0xfb,0x3c,0xa5,0x3a,0xe6,0xd2,0x17,0xb0,0x44,0x33,0x27,0x03,0xbb,0xba,0xf2,0xa2,0xb3,0xfd,0xb4,0x99,0xec,0x0e,0x86,0x65,0x27,0xdd,0x75,0xf2,0xbd,0xf1,0xa9,0x1c,0x0b,0x27,0xd9,0x3d,0x31,0x4a,0x70,0x46,0x8e,0x19,0x63,0x5d,0x48,0x46,0x19,0xe3,0x32,0x46,0xb7,0xb2,0xfb,0x76,0x7a,0x76,0x1a,0xa4,0xf7,0x56,0x57,0x99,0xeb,0x9d,0x55,0xb0,0x10,0x08,0xde,0x5b,0x00,0x56,0x87,0xd2,0x26,0x7e,0x94,0x70,0xc1,0x46,0xb0,0x06,0xf9,0x62,0xaf,0xca,0xe3,0xe5,0x99,0xfb,0x1c,0x42,0x9d,0xa8,0x35,0xec,0xf7,0xa1,0x1b,0xa4,0x21,0xb6,0x7e,0x32,0xea,0x40,0xfa,0x56,0x65,0xe1,0xe4,0xac,0x1d,0xcc,0xf6,0xee,0x42,0x59,0xab,0x52,0xac,0x83,0x6f,0x10,0xed,0xc3,0xe4,0x4a,0xa9,0x97,0xc9,0x6f,0xad,0x7c,0x75,0x79,0x71,0xf5,0xfa,0x74,0xdf,0x89,0x6b,0xef,0xf6,0xd2,0x3b,0x1d,0xd7,0xfd,0x63,0x3a,0xae,0xba,0xe3,0xd4,0x35,0x90,0xba,0x09,0xe1,0x61,0xe7,0x6c,0xe6,0x29,0x16,0xab,0xb5,0xd2,0xde,0x39,0x7e,0x93,0x3b,0x28,0xad,0x24,0x39,0x61,0x14,0xbd,0x40,0xa7,0x34,0x8d,0x35,0x5d,0xe6,0x41,0x10,0x20,0xc7,0xd9,0xa6,0x2d,0x59,0x8a,0xfd,0xad,0x14,0x6f,0x02,0xe6,0xd5,0xc5,0x38,0xf3,0xd0,0xf3,0xba,0x1a,0xcb,0x92,0xa8,0xbb,0x5e,0x25,0xa8,0x9b,0x45,0xf3,0x30,0xa9,0x7b,0x21,0xb9,0x7e,0x87,0xfd,0x2f,0xd9,0x0d,0xf9,0x48,0x8d,0x2d,0x3b,0xf7,0x30,0xe4,0x8a,0xeb,0xbd,0x98,0x77,0xd4,0xa2,0x93,0xae,0xe3,0x1a,0x4b,0xb5,0x05,0x36,0x0c,0x9d,0xf3,0xf4,0x50,0x68,0xc3,0xba,0xc4,0xfb,0xc2,0x24,0x87,0xd1,0xee,0xc6,0xe2,0xaa,0x15,0xa5,0xa9,0x6d,0x72,0x56,0xef,0x56,0x0f,0xea,0x0c,0x97,0xa9,0xa8,0x53,0x6a,0x22,0xcd,0x33,0xdb,0x60,0x05,0x76,0x4a,0xdc,0x77,0xd5,0x3c,0x23,0x4c,0x45,0x79,0x8a,0x3d,0x3c,0x88,0xc1,0xbe,0x17,0xe0,0xa6,0xbf,0x3e,0x5c,0xb3,0x51,0x3b,0x85,0x2f,0x9a,0x62,0x73,0xb2,0x05,0x2c,0x3e,0xab,0x68,0x05,0xf6,0xf6,0xe6,0x23,0x32,0x78,0x85,0x09,0xc7,0x63,0x8f,0xbc,0xc4,0x46,0x29,0x99,0x2a,0x02,0xa1,0x22,0xbc,0xea,0x94,0x0c,0x12,0x85,0x71,0x7f,0x49,0xbc,0x71,0x61,0xbc,0x01,0x0a,0x94,0x97,0x50,0x90,0x2f,0x9b,0xf5,0xa8,0x4d,0xde,0xd3,0x5b,0xd7,0xe4,0x73,0x46,0x6f,0xca,0xb6,0x25,0x89,0xb7,0x2d,0x56,0x1d,0xa0,0x55,0xf1,0x10,0xf9,0x76,0xb2,0xdd,0x0f,0x94,0x54,0x19,0x48,0x54,0xb5,0xcc,0x65,0xe4,0x9c,0x19,0xf5,0x1b,0x52,0x83,0x35,0x20,0x51,0xf5,0x23,0xcd,0xb8,0xe1,0x6d,0xcd,0x4f,0x6f,0x9b,0x16,0xd2,0x66,0x4e,0xc1,0x18,0x1a,0x43,0x9b,0x1c,0x5f,0x38,0xf2,0x15,0xed,0xab,0xe0,0x4b,0x52,0xef,0x04,0x78,0xf0,0x30,0x5b,0x18,0x6c,0xb5,0xd0,0x1c,0xef,0x33,0x4e,0x36,0xfa,0x7a,0x32,0x6e,0xd4,0x51,0x08,0xb8,0x94,0xa0,0x3f,0xcc,0x3f,0x95,0x59,0xba,0xa9,0xde,0x24,0x48,0x42,0xd7,0x40,0x16,0x80,0xce,0x69,0xc0,0x17,0x21,0x60,0x78,0x88,0x5b,0xd9,0xd9,0xb6,0xa5,0x32,0xf5,0x5d,0x8a,0x1e,0xec,0x89,0x80,0x30,0x70,0xb8,0x7e,0x93,0x0b,0xdb,0xd5,0xbf,0x44,0x13,0xb0,0xd0,0xc3,0x1d,0xfa,0x5d,0xc2,0x4b,0x17,0x51,0xb6,0x15,0x83,0xc0,0x64,0x82,0xdb,0x91,0xf7,0x7f,0x3b,0xd0,0x9b,0xc1,0x14,0xa3,0x77,0xb7,0x65,0xd1,0xe6,0xa3,0x52,0xb8,0x07,0x6a,0xae,0x37,0x97,0x9b,0xed,0x62,0x93,0x86,0x2e,0x41,0xa2,0xd8,0x23,0x97,0x7f,0x95,0x34,0x3d,0x27,0x9d,0x71,0x1a,0x18,0x9a,0xb6,0x0d,0x13,0xbe,0x5e,0xd8,0x1b,0x55,0x8c,0x26,0x3d,0x95,0x0e,0xca,0x11,0x88,0xf0,0x1a,0x75,0x09,0x42,0x8c,0xfc,0x5d,0xb8,0x4c,0xbb,0xa2,0x38,0x04,0xc9,0xd3,0x03,0x81,0x18,0xb3,0x3c,0xbd,0x15,0x07,0xa2,0xd7,0x9a,0xdf,0xe1,0x69,0x3a,0x18,0x5f,0xb2,0x5f,0x3f,0x7e,0x1f,0xfb,0x20,0xbe,0x5b,0xfb,0x9d,0xea,0x69,0xe5,0xe2,0xef,0xd3,0x7f,0x7a,0x57,0xac,0x86,0x41,0xec,0xa4,0x87,0xe5,0xe9,0x20,0xf4,0xac,0x07,0xad,0x23,0x37,0x88,0xff,0xb9,0x87,0xdf,0xc6,0x6e,0x50,0xe2,0xd5,0x2e,0x0d,0xd7,0x8f,0x83,0xf8,0xd7,0xbb,0x35,0x3c,0x23,0xf1,0x4b,0x4b,0x62,0x7b,0xd7,0xd7,0xdd,0x7f,0x3a,0xae,0x2e,0x08,0xbc,0xb0,0xdd,0x5f,0xa5,0xaf,0x47,0x97,0x6c,0x0c,0x3a,0x0d,0x00,0x00
};

const uint8_t htmlKorisnici[] = { 0x1f,0x8b,0x08,0x00,0x4c,0x2b,0x09,0x5e,0x00,0xff,0x95,0x57,0x6d,0x6f,0xdb,0x36,0x10,0xfe,0x9e,0x5f,0xc1,0x29,0x18,0xe0,0xa2,0x96,0x1c,0x67,0x2d,0x50,0x28,0x76,0x80,0x2c,0x6d,0xd0,0x02,0xed,0x36,0x24,0x0e,0xba,0x17,0xe4,0x03,0x25,0x9e,0x2d,0xc6,0x14,0xa9,0x91,0x94,0x9c,0x6c,0xcb,0x5f,0xdb,0xb7,0xfd,0xaf,0x1e,0x25,0xd9,0xa6,0x14,0x3b,0xc9,0x68,0xc0,0x16,0xc5,0xe7,0xde,0x9e,0x3b,0xdd,0xc9,0x93,0xef,0xde,0xff,0x7c,0x3e,0xfb,0xed,0x97,0x0f,0x24,0xb3,0xb9,0x38,0x3d,0x98,0xb8,0x1f,0x22,0xa8,0x5c,0x4c,0x03,0x90,0x81,0xbb,0x01,0x94,0x9d,0x1e,0x10,0x5c,0x93,0x1c,0x2c,0x25,0x69,0x46,0xb5,0x01,0x3b,0x0d,0xae,0x67,0x17,0xe1,0x3b,0x44,0x6c,0x8f,0x24,0xcd,0x61,0x1a,0x54,0x1c,0x56,0x85,0xd2,0x36,0x20,0xa9,0x92,0x16,0x24,0x42,0x57,0x9c,0xd9,0x6c,0xca,0xa0,0xe2,0x29,0x84,0xf5,0x66,0x48,0xb8,0xe4,0x96,0x53,0x11,0x9a,0x94,0x0a,0x98,0x8e,0xa3,0xa3,0x8e,0xaa,0xcc,0xda,0x22,0x84,0x3f,0x4b,0x5e,0x4d,0x83,0x5f,0xc3,0xeb,0xb3,0xf0,0x5c,0xe5,0x05,0xb5,0x3c,0x11,0xe0,0xe9,0xe5,0x30,0x05,0xb6,0x80,0xb5,0xa4,0xe5,0x56,0xc0,0xe9,0x57,0xa5,0x97,0xa0,0x0d,0x01,0xa9,0x95,0x10,0xc0,0x26,0xa3,0xe6,0xfe,0x41,0x03,0x32,0xf6,0xde,0x6d,0xdc,0xb5,0x5b,0x89,0x62,0xf7,0xe4,0xef,0xcd,0xb6,0xbe,0x45,0xd3,0xe5,0x42,0xab,0x52,0xb2,0x30,0x55,0x42,0xe9,0x98,0x58,0xa0,0xe2,0xa4,0x83,0x99,0xa3,0x0b,0xe1,0x0a,0xf8,0x22,0xb3,0x31,0xea,0x10,0x0c,0xf4,0x16,0xf0,0xd0,0x98,0x72,0x2b,0x3b,0xee,0x29,0xb7,0x70,0x67,0x43,0x2a,0xf8,0x42,0xc6,0x24,0xc5,0x20,0x7c,0x39,0xb7,0x5a,0x8b,0xab,0x8c,0x5b,0x30,0xb9,0x5a,0xc2,0x4e,0xb5,0x87,0x96,0x26,0x20,0x68,0x4f,0xf7,0x93,0x4e,0x6d,0x00,0x73,0x9a,0x73,0x71,0x1f,0x93,0x60,0xa6,0x21,0x29,0xd3,0x0c,0x2c,0xf9,0x72,0x15,0x0c,0xc9,0x99,0xc6,0x74,0x0c,0xc9,0x47,0x10,0x15,0x58,0x9e,0xd2,0x21,0x31,0x54,0x9a,0xd0,0x80,0xe6,0xf3,0xae,0x9a,0x44,0x69,0x54,0xed,0xc8,0x11,0xb4,0x30,0x80,0x81,0xb4,0x57,0x5d,0x58,0x9d,0xe8,0x98,0xbc,0x3b,0xfa,0xbe,0x7b,0x3f,0xa7,0x7a,0xc1,0x65,0x28,0x60,0x8e,0x6e,0x8e,0xf7,0x9c,0xea,0x26,0x8a,0xce,0xf1,0x0e,0x02,0x2c,0x1b,0x6e,0xaf,0xb3,0xff,0xcb,0x47,0x13,0x48,0x3c,0x2e,0xee,0x88,0x51,0x82,0x33,0x72,0xc8,0x18,0xeb,0x42,0x0a,0xca,0x18,0x97,0x0b,0x0c,0xa3,0xb8,0x7b,0xda,0x13,0xfd,0x6c,0x19,0xd5,0x49,0xdd,0x99,0xee,0x44,0x20,0xd8,0x53,0xbf,0xbe,0xd8,0x65,0x26,0x96,0x36,0x0b,0xd3,0x8c,0x0b,0x36,0x80,0x0a,0xe4,0xab,0x67,0xcd,0x1e,0xce,0x8f,0xdd,0xe7,0x19,0xef,0xe3,0x4c,0x55,0xf0,0x7c,0x0c,0x5d,0x86,0x76,0x69,0xea,0x67,0xa1,0x65,0x30,0xb4,0xaa,0x88,0xc7,0xc7,0x3e,0x8b,0xfe,0x69,0xa2,0xac,0x55,0x39,0x26,0xfc,0x11,0xc2,0x7f,0x62,0x5c,0xcd,0xf4,0x52,0xf8,0xd8,0xc3,0x37,0xe7,0x67,0x17,0x6f,0x8f,0x9e,0x7b,0xac,0xfc,0xd3,0x7e,0x3c,0x93,0x51,0xdb,0x25,0x26,0xa3,0xa6,0xfd,0x4d,0x5c,0x9b,0x68,0xbb,0x0c,0x3e,0xd2,0x9c,0x4d,0x03,0xc5,0x16,0xaa,0x52,0x3a,0x38,0xc5,0x6f,0x72,0x0b,0xc8,0x20,0xc8,0xd2,0x4a,0x45,0x8c,0xa5,0xf2,0x16,0x50,0xf2,0x78,0xdd,0x72,0x90,0x19,0x01,0xb5,0x50,0xc3,0x51,0xd0,0x16,0xde,0x34,0xc0,0x60,0xdb,0xca,0xd3,0xc0,0xda,0x36,0xd6,0x88,0xe8,0xed,0xa6,0xb9,0x91,0xb5,0x8d,0x8d,0x7c,0x7a,0x8f,0x1d,0x2d,0x7b,0x7c,0xfc,0x99,0x1a,0x5b,0xb7,0xe0,0xdd,0xc7,0x17,0x5c,0x3f,0x79,0x7e,0x65,0xa9,0x2d,0xcd,0xee,0xb3,0x19,0xcf,0x81,0x98,0x02,0xdb,0x95,0xf3,0xb6,0xc2,0x7c,0x11,0x4b,0xcd,0x72,0x0f,0xfa,0xa7,0x32,0x4f,0xd0,0x4f,0x35,0x6f,0x40,0xb5,0x48,0xdd,0x86,0x3d,0x2c,0xee,0xbc,0x08,0x27,0x76,0xcb,0x6f,0x7b,0xea,0x11,0x3e,0xaa,0xf9,0xdb,0xf4,0xef,0x54,0xf3,0xc2,0x6e,0xb1,0x02,0xfb,0x57,0x5b,0x7a,0x53,0xc2,0x54,0x5a,0xe6,0xe8,0x66,0xb4,0x00,0xfb,0x41,0x80,0xbb,0xfc,0xf1,0xfe,0x13,0x1b,0xac,0x89,0x7f,0xb5,0xad,0x0a,0x27,0xb7,0x82,0xe4,0x4a,0xa5,0x4b,0xb0,0xd7,0x97,0x9f,0x51,0x3a,0x58,0x99,0x78,0x34,0x0a,0xc8,0x6b,0x6c,0x5d,0x92,0xa9,0x55,0x24,0x54,0x8a,0x33,0x47,0xc9,0x28,0x53,0xc8,0xdd,0x6b,0x12,0x8c,0x56,0x26,0xd8,0xa3,0x02,0xe5,0x25,0xac,0xc8,0xd7,0xf5,0x7e,0xe0,0x2b,0xef,0xd9,0x6d,0x6b,0xe7,0x29,0x87,0xd7,0xe5,0x85,0x92,0x1b,0xd1,0x8d,0xc6,0x48,0x49,0x85,0xd9,0x40,0xf9,0x79,0x29,0x53,0xe7,0xe1,0xa0,0xdf,0x06,0xb6,0x58,0x03,0x12,0xf5,0x2d,0x95,0xe6,0x46,0xf2,0x94,0xfb,0x1c,0x78,0x8f,0xaf,0xaf,0x3b,0x07,0x63,0xe8,0x02,0x7c,0xf5,0x38,0xd0,0xcb,0x25,0xed,0x1b,0xe1,0x73,0xd2,0x9e,0x44,0x8c,0xe2,0xd4,0x9e,0x22,0x87,0x2a,0x41,0x43,0x54,0x52,0x52,0x69,0x17,0x0e,0x72,0xde,0x13,0x72,0xab,0x8d,0x2e,0xe2,0x52,0x82,0xfe,0x38,0xfb,0x52,0xb3,0xdf,0xd6,0xb7,0xc5,0x62,0x33,0x84,0x4a,0xd6,0x96,0x4f,0x46,0x2b,0x20,0x09,0x60,0xb8,0x0c,0x90,0x3c,0x60,0x51,0x14,0x79,0x49,0xd8,0xb4,0x89,0x3a,0xc3,0x5d,0x8d,0x3d,0xd8,0x03,0x01,0x61,0xe0,0xa5,0xee,0x5c,0x82,0x29,0x85,0xf5,0xed,0x6b,0x98,0x6b,0x30,0x19,0xb0,0x78,0x87,0x7d,0x97,0xd7,0xbf,0x68,0xc1,0x0d,0xca,0x7a,0x9c,0x44,0xa6,0x10,0xdc,0x0e,0x82,0x7f,0x7c,0xde,0xd7,0x8b,0x29,0x46,0x6f,0xaf,0x67,0xce,0xf3,0x72,0x50,0x0b,0xf7,0x40,0x0f,0xbb,0x52,0xb5,0x4e,0x4a,0x57,0x3c,0x53,0xec,0xbf,0x7f,0xb9,0xfc,0xbd,0xd6,0xd2,0x8b,0xd1,0xf9,0x86,0x0d,0x06,0x3d,0xdb,0xb0,0x84,0x63,0xdd,0x5e,0xaa,0xd5,0x60,0xdc,0xb3,0xe8,0xa0,0x1c,0x81,0x08,0x6f,0x51,0xe7,0x20,0xc4,0x20,0xdc,0x85,0x2b,0xb4,0xab,0x91,0x97,0x20,0x79,0xfe,0x42,0x20,0x5d,0x5a,0x5e,0xbd,0x10,0x5b,0x69,0x7e,0xfb,0x42,0x68,0xa2,0xd5,0x3e,0x68,0xb7,0xa0,0x3b,0x25,0xe0,0x53,0xfa,0xc7,0xd1,0x4d,0x6f,0x70,0x69,0xd8,0x0f,0x1e,0xf7,0xc0,0x3c,0xdf,0x8f,0x3d,0xbe,0x39,0xd9,0x0e,0x20,0xb7,0x6a,0x0e,0xf6,0xe3,0x7f,0xb8,0x39,0x19,0x8d,0x70,0xca,0x68,0xd7,0x86,0x6b,0x2c,0x95,0xf8,0x3a,0x2d,0x38,0xf6,0x9f,0x76,0x8b,0x4f,0x08,0xbe,0xbd,0x61,0xd9,0xba,0xd9,0x64,0x28,0xc1,0x88,0x71,0xb6,0x9b,0x25,0x36,0x71,0xab,0xa9,0x04,0x52,0x22,0x13,0xf8,0xfa,0x1d,0x75,0xec,0x3a,0x3e,0xf7,0x9b,0x7d,0x83,0x6e,0xa2,0xdd,0x92,0xa8,0x44,0xf0,0x65,0x49,0x18,0x95,0x3c,0x36,0xd8,0x1e,0xe3,0x9c,0xe3,0xe0,0x83,0x21,0xa9,0x20,0xc5,0xf9,0x52,0x68,0x5a,0x89,0x5b,0x90,0x3d,0xe5,0x2e,0x03,0xfb,0x95,0xbf,0xf5,0xf8,0x6a,0x6a,0x1e,0x47,0x70,0xdb,0xe8,0x27,0xa3,0x66,0x16,0xe0,0x44,0x75,0x7f,0x51,0xbe,0x01,0xbc,0xdf,0x11,0xdd,0xb2,0x0c,0x00,0x00
};

const uint8_t htmlHistorija[] = { 0x1f,0x8b,0x08,0x00,0x7e,0xaa,0x0c,0x5e,0x00,0xff,0x95,0x55,0x61,0x6f,0xdb,0x36,0x10,0xfd,0x9e,0x5f,0xc1,0x29,0x28,0xe6,0xa2,0x91,0x1c,0x7b,0x1d,0x50,0xb8,0xb6,0x81,0x2c,0x4d,0x90,0x02,0x0d,0x36,0xa4,0x09,0xba,0x6e,0xe8,0x07,0x5a,0x3c,0x89,0x8c,0x29,0x52,0x23,0x29,0x2b,0xee,0x96,0xff,0xde,0xa3,0x24,0xc7,0x92,0x6a,0xd7,0x19,0x0d,0xc8,0x22,0xf9,0xee,0x78,0xef,0xee,0xf8,0x34,0xfd,0xe9,0xdd,0xef,0xe7,0xb7,0x9f,0xff,0xb8,0x20,0xdc,0x65,0x72,0x7e,0x34,0xf5,0x7f,0x44,0x52,0x95,0xce,0x02,0x50,0x81,0x5f,0x00,0xca,0xe6,0x47,0x04,0xc7,0x34,0x03,0x47,0x49,0xcc,0xa9,0xb1,0xe0,0x66,0xc1,0xdd,0xed,0x65,0xf8,0x06,0x11,0xdb,0x2d,0x45,0x33,0x98,0x05,0x2b,0x01,0x65,0xae,0x8d,0x0b,0x48,0xac,0x95,0x03,0x85,0xd0,0x52,0x30,0xc7,0x67,0x0c,0x56,0x22,0x86,0xb0,0x9a,0x9c,0x10,0xa1,0x84,0x13,0x54,0x86,0x36,0xa6,0x12,0x66,0xa3,0xe8,0xb4,0xe3,0x8a,0x3b,0x97,0x87,0xf0,0x4f,0x21,0x56,0xb3,0xe0,0xcf,0xf0,0xee,0x2c,0x3c,0xd7,0x59,0x4e,0x9d,0x58,0x48,0x68,0xf9,0x15,0x30,0x03,0x96,0xc2,0xc6,0xd2,0x09,0x27,0x61,0x7e,0x25,0xac,0xd3,0x66,0x4d,0x74,0x42,0x4a,0x6d,0x96,0x60,0x7e,0xb6,0x04,0x92,0x44,0xc4,0x02,0x54,0xbc,0x9e,0x0e,0x6b,0xd4,0x51,0x6d,0x62,0xdd,0xda,0x4f,0xfc,0xbb,0x1f,0x0b,0xcd,0xd6,0xe4,0xdf,0xa7,0x69,0xb5,0x44,0xe3,0x65,0x6a,0x74,0xa1,0x58,0x18,0x6b,0xa9,0xcd,0x84,0x38,0xa0,0xf2,0x6d,0x07,0x93,0x60,0x40,0x61,0x09,0x22,0xe5,0x6e,0x82,0x3e,0x24,0x03,0xb3,0x05,0x3c,0xd6,0x47,0xf9,0xc1,0xc7,0x3d,0xe7,0x0e,0x1e,0x5c,0x48,0xa5,0x48,0xd5,0x84,0xc4,0x48,0xa9,0x6d,0xe7,0x47,0x73,0x62,0xc9,0x85,0x03,0x9b,0xe9,0x25,0xec,0x74,0x7b,0x9c,0xe9,0x7b,0x7a,0x4b,0x17,0x20,0x69,0xcf,0xff,0x0f,0x03,0x7b,0x02,0x24,0x34,0x13,0x72,0x3d,0x21,0xc1,0xad,0x81,0x45,0x11,0x73,0x70,0xe4,0xfa,0x63,0x70,0x42,0xce,0x0c,0x16,0xe8,0x84,0x5c,0x81,0x5c,0x81,0x13,0x31,0x3d,0x21,0x96,0x2a,0x1b,0x5a,0x30,0x22,0xe9,0xba,0x59,0x68,0x83,0xae,0x7d,0x82,0x24,0xcd,0x2d,0x20,0x99,0xe6,0xad,0x0b,0xab,0x4a,0x3f,0x21,0x6f,0x4e,0x5f,0x74,0xd7,0x33,0x6a,0x52,0xa1,0x42,0x09,0x09,0x86,0x39,0xda,0xb3,0x6b,0x6a,0x16,0x9d,0xed,0xc7,0xcd,0xcb,0xee,0x64,0x38,0x76,0xd2,0x9d,0xf3,0xff,0x9b,0x9f,0x9a,0xd8,0x64,0x94,0x3f,0x10,0xab,0xa5,0x60,0xe4,0x98,0x31,0xd6,0x85,0xe4,0x94,0x31,0xa1,0x52,0xa4,0x95,0x3f,0xb4,0xcb,0xb3,0x33,0x20,0x73,0xb0,0xbb,0xaa,0x5a,0xef,0xec,0x82,0x85,0x44,0xf0,0xc1,0x06,0x70,0x66,0xa2,0x1c,0x0f,0x63,0x2e,0x24,0x1b,0xc0,0x0a,0xd4,0xcb,0x83,0x47,0x1e,0x27,0x63,0xff,0x7b,0x8e,0x6b,0xae,0x57,0x70,0x98,0x43,0x37,0x49,0xfb,0xbc,0xf5,0x8b,0xd1,0x24,0x32,0x74,0x3a,0x9f,0x8c,0xc6,0xed,0x64,0xb6,0x77,0x17,0xda,0x39,0x9d,0x61,0x1f,0x7c,0x87,0x68,0x5f,0x26,0xdf,0x4a,0xbd,0x4a,0x7e,0x1f,0xe5,0xeb,0xf3,0xb3,0xcb,0x5f,0x4f,0x0f,0xdd,0xb8,0xf6,0x6e,0xaf,0xbc,0xd3,0x61,0xa3,0x1f,0xd3,0x61,0x2d,0x93,0x53,0x2f,0x20,0x8d,0x1a,0xe1,0x65,0x17,0x6c,0x16,0x68,0x96,0xea,0x95,0x36,0xc1,0x1c,0x9f,0xe4,0x1e,0xaa,0x28,0x49,0x41,0x18,0x45,0x16,0x48,0xca,0xd0,0xd4,0xd0,0xa4,0x88,0xa2,0x08,0x7d,0x8c,0x37,0xb2,0xe4,0x28,0x0a,0x5d,0x65,0xbe,0x4d,0x58,0xd0,0x34,0xe3,0x2c,0x40,0xe6,0x4d,0x37,0x56,0x2d,0xd1,0xc8,0x5f,0x6d,0x68,0xb6,0x93,0xed,0x22,0x9f,0x7f,0xaa,0x94,0x90,0xbc,0x7f,0x87,0xfa,0xc7,0x77,0x43,0x3e,0x50,0xeb,0x2a,0x09,0xdf,0x0f,0xb9,0x14,0xe6,0x20,0xe6,0x1a,0xaf,0x14,0x27,0x54,0x31,0xf2,0x19,0xa8,0xd9,0x8f,0xbb,0x68,0x4b,0x32,0x9f,0xf7,0x21,0x5b,0x4a,0xc3,0x36,0xa7,0xa9,0xdb,0x66,0xb8,0xd9,0xad,0x17,0x9a,0x7a,0x54,0x89,0x6b,0x0a,0x60,0x63,0x23,0x72,0xb7,0xc5,0x4a,0xd4,0x35,0xdc,0xf7,0xbd,0x37,0x23,0x4c,0xc7,0x45,0x86,0x8a,0x1b,0xa5,0xe0,0x2e,0x24,0xf8,0xd7,0xdf,0xd6,0xef,0xd9,0xa0,0x9d,0xf0,0x97,0xdb,0xd6,0xf0,0xb6,0x25,0x2c,0x3e,0xea,0x78,0x09,0xee,0xee,0xe6,0x03,0x7a,0x08,0x4a,0x3b,0x19,0x0e,0x03,0xf2,0x0a,0x65,0x4d,0x31,0x5d,0x46,0x52,0xc7,0xf8,0x85,0xd2,0x2a,0xe2,0x1a,0xb3,0xf4,0x8a,0x04,0xc3,0xd2,0x06,0x7b,0x5c,0xa0,0xbd,0x82,0x92,0x7c,0xda,0xcc,0x07,0x6d,0xe7,0xbd,0x73,0x9b,0x0e,0xfa,0x51,0xd0,0x9b,0x26,0x6b,0x59,0xe2,0x47,0x12,0x7b,0x04,0x30,0xaa,0xb4,0xe7,0xbc,0x93,0xe6,0x27,0xfc,0x13,0x26,0xd2,0x2a,0x03,0x6b,0x69,0x0a,0x78,0x62,0x52,0xa8,0xd8,0x73,0x1a,0xe0,0x17,0xbd,0x58,0x52,0xd4,0x92,0x9d,0x45,0xf2,0xa3,0x89,0x21,0x12,0x4a,0x81,0xb9,0xba,0xbd,0xae,0x72,0x74,0x03,0xb6,0x90,0xce,0x12,0x4e,0x57,0x40,0x16,0x00,0x8a,0x18,0x48,0x0c,0x58,0x0e,0x6c,0xd2,0xca,0xcd,0x86,0xea,0x57,0x9a,0x0b,0x8b,0x76,0xf5,0x69,0x11,0x5e,0x12,0x1a,0xd9,0x5c,0x0a,0x37,0x08,0xfe,0x6b,0x93,0xf3,0x83,0x69,0x46,0xef,0xef,0xaa,0x52,0x15,0x83,0xca,0xb0,0x05,0x78,0x7c,0x7b,0xb4,0xa5,0xb6,0x21,0xd1,0x35,0xe1,0x9a,0x7d,0x15,0xea,0xaf,0xca,0xb0,0xa7,0x44,0x3e,0x14,0x03,0x0c,0x03,0xa9,0xfb,0x05,0x39,0xe1,0x47,0xcf,0xdd,0xe8,0x72,0x30,0xea,0x45,0xe1,0xa1,0x02,0x81,0x08,0x6f,0x50,0xe7,0x20,0xe5,0x20,0xdc,0x85,0xcb,0x8d,0x4f,0xe9,0x73,0x90,0x22,0x7b,0x26,0x10,0x33,0x54,0x64,0x77,0xf2,0x99,0xe8,0x95,0x11,0xf7,0xd8,0x35,0xfb,0xf0,0xbb,0x1b,0xc3,0x0f,0xd1,0xa9,0x6a,0x2b,0x73,0x7f,0x9f,0x7e,0xe9,0xc9,0xb4,0x81,0xbd,0xd8,0x51,0x0f,0x2b,0xb2,0xbd,0xd0,0x71,0x0f,0xda,0xf0,0xdc,0x8b,0xff,0xa5,0x87,0x7f,0x62,0xba,0xd7,0xe2,0xf5,0x17,0x7f,0x45,0x71,0xa9,0x30,0x16,0x65,0xc3,0x2e,0x83,0x03,0x4a,0xdf,0xa8,0xc9,0x74,0x58,0x0b,0x0e,0xca,0xb5,0xcb,0xe4,0x37,0xb7,0xf4,0x2b,0x1f,0x40,0x0b,0x00,0x00
};

//neke varijable za tacno primanje datuma i vremena:

char* ntpServer = "pool.ntp.org";
bool vratiNajefikasnije = false;
const short int gmtOffsetSekunde = 3600; //konfiguracija vremena
const short int pomjeranjeSekunde = 3600; //u zavisnosti od geografskog polozaja

//ne moze svako brisati vremena i zapise, samo onaj ko zna sifru:
String lozinkaPokusaj = "";
String lozinka = "mojalozinka123";

//neke od funkcija cija imena sve govore o njima:
void resetujVremena();
void generirajDatumIVrijeme();
char* stringUpChar(String);
void resetujZapise();
void generirajUpitRadnici();
void generirajUpitZapisi();

//pomocni structovi:
struct Radnik {
    String prezime;
    String ime;
    int id;
    byte aktivnost;
};

struct Datum {
    short int dan;
    short int mjesec;
    unsigned short int godina;
};

struct Vrijeme {
    short int sat;
    short int minuta;
};

Radnik r;
Vrijeme v;
Datum d;

//pomocne varijable:
String formirajDatum(int, int);
bool vratiHistoriju = false;
bool vratiKorisnike = false;
bool vratiZapise = false;
bool obrisiZapise = false;
bool obrisiVremena = false;
struct tm vrijemeDatum; // za dobivanje vremena i datuma.
String sqlQuery = "";
double real = -3.5555;
void formirajSqlHistorija();

void setup()  
{
  Serial.begin(115200);
  char *zErrMsg = 0;

  Serial.println("string od negativnog realnog broja je :");
  Serial.println(String(real));
  
  pinMode(diodaZaUlazak, OUTPUT);

  pinMode(diodaZaMrezu, OUTPUT);
  
  SPI.begin();
  SD.begin();
  sqlite3_initialize();

  if (openDb("/sd/bazaPodataka.db", &db1)) {
    Serial.println("Database opened successfully!");
  }
  sqlite3_close(db1);
  while (!Serial);  // For Yun/Leo/Micro/Zero/...
  delay(100);
  Serial.println("\n\nAdafruit finger detect test");
  finger.begin(57600);
  delay(5);
  if (!finger.verifyPassword()) {
    Serial.println("Did not find fingerprint sensor :(");
    while(1) delay(1);
  } 
  Serial.println("Found fingerprint sensor!");
  
  finger.getTemplateCount();
  if (!SPIFFS.begin()){
    Serial.println("An Error has occurred while mounting SPIFFS");
    return;
  }

  WiFi.mode(WIFI_AP_STA); //za konekciju sa internetom, i za AP mod
  WiFi.begin(ssid, password); //konektuj se na globalnu mrezu.
  
  while(WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..."); //upali diodu ako smo spojeni.
  } //znaci da sam konektovan:

  digitalWrite(diodaZaMrezu, HIGH); 

  //konfiguracija za komunikaciju sa ntp serverom:
  configTime(gmtOffsetSekunde, pomjeranjeSekunde, ntpServer);

  WiFi.softAP("ESPServer", "123456789"); //ovo je za konekciju

  delay(500); // sacekaj SYSTEM_EVENT_AP_START event.

  IPAddress espIP(192, 168, 1, 100); //ovo je nasa ip adresa...
  IPAddress gateway(192, 168, 1, 60); //neki bezveze.
  IPAddress subnet(255, 255, 255, 0);

  WiFi.softAPConfig(espIP, gateway, subnet);
  
  IPAddress IP = WiFi.softAPIP();
  
  Serial.println("Ovo je moja Access Point adresa:");
  Serial.println(IP); //trebala bi biti espIP.

  ws.onEvent(onWsEvent);
  server.addHandler(&ws);
  //dodani fajlovi:
  server.on("/forms", HTTP_GET, [](AsyncWebServerRequest *request){
    AsyncWebServerResponse *response = request->beginResponse_P(200, "text/html", htmlForma, sizeof(htmlForma));
    response->addHeader("Content-Encoding", "gzip");
    request->send(response);
  });

  server.on("/zapisi", HTTP_GET, [](AsyncWebServerRequest *request){
    AsyncWebServerResponse *response = request->beginResponse_P(200, "text/html", htmlZapisi, sizeof(htmlZapisi));
    response->addHeader("Content-Encoding", "gzip");
    request->send(response);
  });

  server.on("/korisnici", HTTP_GET, [](AsyncWebServerRequest * request) {
    AsyncWebServerResponse *response = request->beginResponse_P(200, "text/html", htmlKorisnici, sizeof(htmlKorisnici));  
    response->addHeader("Content-Encoding", "gzip");
    request->send(response);
    });

  server.on("/Najefikasniji", HTTP_GET, [](AsyncWebServerRequest * request) { //ovo je html.
    AsyncWebServerResponse *response = request->beginResponse_P(200, "text/html", htmlNajefikasniji, sizeof(htmlNajefikasniji));  
    response->addHeader("Content-Encoding", "gzip");
    request->send(response);  
  });

  server.on("/historijaEfikasnosti", HTTP_GET, [](AsyncWebServerRequest * request) { //ovo je html.
    AsyncWebServerResponse *response = request->beginResponse_P(200, "text/html", htmlHistorija, sizeof(htmlHistorija));  
    response->addHeader("Content-Encoding", "gzip");
    request->send(response);  
  });

  server.on("/efficiencyHistory", HTTP_GET, [](AsyncWebServerRequest * request) {   //ovo je forma.    
    if (request->getParam("id")->value() == "") 
        r.id = -1;
    else
        r.id = (request->getParam("id")->value()).toInt();
    r.ime = request->getParam("ime")->value();    
    r.prezime = request->getParam("prezime")->value();
    d.mjesec = (request->getParam("mjesec")->value()).toInt();
    d.godina = (request->getParam("godina")->value()).toInt();

    //nista.
    
    vratiHistoriju = true;
    request->redirect("/historijaEfikasnosti");
  });

  server.on("/vratiEfikasne", HTTP_GET, [](AsyncWebServerRequest * request) {   //ovo je forma.
    satiPoZadatku = (request->getParam("efikasnost")->value()).toDouble();
    if (satiPoZadatku == 0.000)
        satiPoZadatku = 100000000.00; //uvijek zadovoljeno.
    if (request->getParam("id")->value() == "") 
        r.id = -1;
    else
        r.id = (request->getParam("id")->value()).toInt();
    r.ime = request->getParam("ime")->value();    
    r.prezime = request->getParam("prezime")->value();

    generirajDatumIVrijeme(); //jer trazim iz zadnjeg mjeseca trenutne godine.
    
    vratiNajefikasnije = true;
    request->redirect("/Najefikasniji");
  });

  server.on("/resetujVremena", HTTP_GET, [](AsyncWebServerRequest * request) {
    lozinkaPokusaj = String(request->getParam("sifraa")->value());
    if (lozinkaPokusaj == lozinka) {
      //resetiraj        
      obrisiVremena = true;
      vratiKorisnike = false;
      Serial.println("uspjesno resetiranje korisnickih vremena!");
      request->redirect("/korisnici");
    } else {
      //nemoj resetirati, sifra nije tacna
      obrisiVremena = false;
      vratiKorisnike = false;
      Serial.println("niste unijeli ispravnu lozinku za resetiranje vremena!");
      request->send(404, "text/plain", "Pogresna lozinka za resetiranje vremena korisnika!");
    }
  });

  server.on("/upitZaKorisnike", HTTP_GET, [](AsyncWebServerRequest * request) {
    if (request->getParam("idKorisnik")->value() == "")
        r.id = -1;
    else
        r.id = (request->getParam("idKorisnik")->value()).toInt();

    r.prezime = String(request->getParam("prezimeKorisnika")->value());    
    r.ime = String(request->getParam("imeKorisnika")->value());    

    r.prezime.toLowerCase();
    r.ime.toLowerCase();
    
    vratiKorisnike = true;
    obrisiVremena  = false;
    
    request->redirect("/korisnici");
  });
    
  server.on("/upitBaziPodataka", HTTP_GET, [](AsyncWebServerRequest *request){
    if (request->getParam("ID")->value() == "")
        r.id = -1;
    else
        r.id = (request->getParam("ID")->value()).toInt();    
    r.prezime = String(request->getParam("prezime")->value());
    r.ime = String(request->getParam("ime")->value());
    d.dan = (request->getParam("dan")->value()).toInt();
    d.mjesec = (request->getParam("mjesec")->value()).toInt();
    d.godina = (request->getParam("godina")->value()).toInt();

    r.prezime.toLowerCase();
    r.ime.toLowerCase();
    
    obrisiZapise = false;
    vratiZapise = true;

    request->redirect("/zapisi");                    
  });

  server.on("/zahtjevZaResetiranje", HTTP_GET, [](AsyncWebServerRequest *request){  
    lozinkaPokusaj = String(request->getParam("sifra")->value());

    if (lozinkaPokusaj == lozinka) { // moze biti i druga lozinka, ne mora biti kao u korisnici.
        Serial.println("uspjesno resetovanje zapisa!");

        obrisiZapise = true;
        vratiZapise = false;
        request->redirect("/zapisi");
    } else {
        Serial.println("pogresna lozinka!");

        vratiZapise = false;
        obrisiZapise = false;
        request->send(404, "text/plain", "Pogresna lozinka za resetiranje zapisa!");
    }
  });
 
  server.on("/addFinger", HTTP_POST, [](AsyncWebServerRequest *request){
    //upisivanje = 1;
    prekini_upisivanje = 1; //SAD GA STAVLJA NA KECA ZA SVAKI SLUCAJ A AKO BUDE IME I PREZIME UNESENO ONDA IDE NA NULU
    AsyncWebParameter* p = request->getParam(1);
    String ime = String(p->value());
    p = request->getParam(0);
    String prezime = String(p->value().c_str());
    
    ime.toLowerCase();
    prezime.toLowerCase();
    
    Serial.print("Generirano prezime i ime je :");
    Serial.print(prezime);
    Serial.print(", ");
    Serial.println(ime); 
    if (ime.length() > 1 && prezime.length() > 1){
      rc = openDb("/sd/bazaPodataka.db", &db1); //otvori.  
      prekini_upisivanje = 0; //SAD MOZE UPISAT
      //da probamo sa drugacijim nacinom query-anja:
      sqlQuery = ""; // ocisti prije upotrebe.          //dodao broj zadataka.
      sqlQuery += "INSERT INTO radnici (Prezime, Ime, Status, Sekunde, BrojZadataka) VALUES('";
      sqlQuery += prezime + "', '";
      sqlQuery += ime + "', 0, 0, 0);";
      Serial.println("generirana sql naredba je :");
      Serial.println(sqlQuery);
      rc = db_exec(db1, stringUpChar(sqlQuery));
      rc = db_exec(db1, "SELECT * FROM radnici WHERE id = (SELECT MAX(id) FROM radnici);");
      Serial.print("Enrolling ID #");
      Serial.println(db_row[0]);
      id = atoi(db_row[0].c_str());
      sqlite3_close(db1);
      request->redirect("/enroll");
    }
    //sqlite3_close(db1);
  });

  server.on("/enroll", HTTP_GET, [](AsyncWebServerRequest *request){
    //request->send(SPIFFS, "/enrol.html", "text/html");
    //i ovaj sam kodiro.
    AsyncWebServerResponse *response = request->beginResponse_P(200, "text/html", htmlEnroll, sizeof(htmlEnroll));
    response->addHeader("Content-Encoding", "gzip");
    request->send(response);
    delay(500);
 
    if (prekini_upisivanje == 0) {
        upisivanje = 1; //da bi u loop-u proradilo.
        Serial.println("evo posluzio sam enroll za otisak..");
    }
  });
  server.begin();
}

void enrollKopija() {
  while(!getFingerprintEnroll() && prekini_upisivanje == 0);
  Serial.println("PREKID");
}

void loop()                     // run over and over again
{
  if (upisivanje == 0){ //AKO SE TRENUTNO NE VRSI UPISIVANJE ONDA MOZE PROVJERAVATI IMA LI OTISKA NA ULAZU
    getFingerprintID();
    //getFingerprintIDez(); MISLIM DA MOZE OCITAVAT I BEZ OVE FUNKCIJE, MISLIM MENI SAD KAD SAM PROBO RADI
  } else if (upisivanje == 1 && posluzioEnroll) { //znaci da sam na enroll stranici
    upisivanje = 0;
    posluzioEnroll = false;  
    enrollKopija(); //tek sad enrollaj novog klijenta.  
    prekini_upisivanje = 1; // ne treba mi vise upisivat, resetiram varijablu.
    delay(3000); //delayaj da se ne pomijesa enrollanje sa ulaskom.
  }

  /*
  //naravno ova globalna mreza na koju se konektujemo bi trebala da ima pristup internetu.  
  if (WiFi.status() != WL_CONNECTED && diodaUpaljena) { // nisam konektovan a dioda upaljena.
    digitalWrite(diodaZaMrezu, LOW);
    diodaUpaljena = false;
  } else if (WiFi.status() == WL_CONNECTED && !diodaUpaljena) { //konektovan sam a dioda ugasena.
    digitalWrite(diodaZaMrezu, HIGH);
    diodaUpaljena = true;
  }
  */
  
  delay(50);            //don't ned to run this at full speed.
}
//////// Ovdje su sve funkcije koje su dodane 
void formirajSqlHistorija() {
    //samo kopirati kod od proslog queryja.
    
    sqlQuery = "";
    sqlQuery += "SELECT * FROM mjeseci WHERE ID ";

    if (r.id == -1)
        sqlQuery += "!= " + String(maxRadnika + 1);
    else
        sqlQuery += "= " + String(r.id);

    sqlQuery += " AND UPPER(Prezime) ";

    if (r.prezime == "")
       sqlQuery += "!= ''";
    else
       sqlQuery += "= UPPER('" + String(r.prezime) + "')";              

    sqlQuery += " AND UPPER(Ime) ";

    if (r.ime == "")    
        sqlQuery += "!= ''";   
    else
        sqlQuery += "= UPPER('" + String(r.ime) + "')";        
    
    sqlQuery += " AND Mjesec ";
    
    if (d.mjesec == 0) 
        sqlQuery += "> 0";
    else
        sqlQuery += "= " + String(d.mjesec);
    
    sqlQuery += " AND Godina ";
    
    if (d.godina == 0) 
        sqlQuery += "> 0";
    else
        sqlQuery += "= " + String(d.godina);
    

    sqlQuery += ";";               
}

void generirajUpitZapisi() {
    sqlQuery = "";
    sqlQuery += "SELECT * FROM zapisi WHERE ID ";

    if (r.id == -1)
        sqlQuery += "!= " + String(maxRadnika);
    else
        sqlQuery += "= " + String(r.id);

    sqlQuery += " AND UPPER(prezime) ";

    if (r.prezime == "")
       sqlQuery += "!= ''";
    else
       sqlQuery += "= UPPER('" + String(r.prezime) + "')";              

    sqlQuery += " AND UPPER(ime) ";

    if (r.ime == "")    
        sqlQuery += "!= ''";   
    else
        sqlQuery += "= UPPER('" + String(r.ime) + "')";

    sqlQuery += " AND dan ";
    
    if (d.dan == 0) 
        sqlQuery += "> 0";
    else
        sqlQuery += "= " + String(d.dan);
    
    sqlQuery += " AND mjesec ";
    
    if (d.mjesec == 0) 
        sqlQuery += "> 0";
    else
        sqlQuery += "= " + String(d.mjesec);
    
    sqlQuery += " AND godina ";
    
    if (d.godina == 0) 
        sqlQuery += "> 0";
    else
        sqlQuery += "= " + String(d.godina);
    

    sqlQuery += ";";               
}

void generirajUpitRadnici() {
    sqlQuery = "";
    sqlQuery += "SELECT * FROM radnici WHERE ID ";
    if (r.id == -1)
        sqlQuery += "!= " + String(maxRadnika); // trivijalan slucaj se ogleda u tome da se broj radnika krece od (0 - (maxRadnika - 1)), pa nikad nece moci biti maxRadnika.
    else
        sqlQuery += "= " + String(r.id);

    sqlQuery += " AND UPPER(Prezime) ";

    if (r.prezime == "") 
        sqlQuery += "!= ''";
    else
        sqlQuery += "= UPPER('" + String(r.prezime) + "')";       

    sqlQuery += " AND UPPER(Ime) ";

    if (r.ime == "") {
        sqlQuery += "!= ''";
    } else {
        sqlQuery += "= UPPER('" + String(r.ime) + "')";
    }
    sqlQuery += ";";                 
}

void generirajDatumIVrijeme() { 
    digitalWrite(diodaZaMrezu, LOW);
    while(!getLocalTime(&vrijemeDatum)) {
        Serial.println("Zapeo sam u 'generirajDatumIVrijeme'");
        delay(1000); //ako ti sve stane, znaci da nisi spojen sa internetom, te ova while sve zaustavi.
    }   
    digitalWrite(diodaZaMrezu, HIGH); //sve dobro proslo.
    d.dan = vrijemeDatum.tm_mday;
    d.mjesec = vrijemeDatum.tm_mon + 1;
    d.godina = vrijemeDatum.tm_year + 1900;
    v.sat = vrijemeDatum.tm_hour;
    v.minuta = vrijemeDatum.tm_min;
    return;
}

void resetujVremena() {        
    sqlQuery = "";
    sqlQuery += "UPDATE radnici SET Sekunde = 0, BrojZadataka = 0;";    
    rc = db_exec(db1, stringUpChar(sqlQuery));
}

char* stringUpChar(String mojString) {
    if (mojString.length() != 0) {
        char *p = const_cast<char*>(mojString.c_str());
        return p;
    }
    return NULL;
}

String formirajDatum(int mjesec, int godina) {
    String r = "";
    switch (mjesec) {
        case 1: r = "January";
        break;
        case 2: r = "February";
        break;
        case 3: r = "March";
        break;
        case 4: r = "April";
        break;
        case 5: r = "May";
        break;
        case 6: r = "June";
        break;
        case 7: r = "July";
        break;
        case 8: r = "August";
        break;
        case 9: r = "September";
        break;
        case 10: r = "October";
        break;
        case 11: r = "November";
        break;
        case 12: r = "December";
        break;
        default: r = "Error Converting...";
        break;               
    }

    r += " " + String(godina);
    return r;
}

void resetujZapise() {
    sqlQuery = "";
    sqlQuery += "DELETE FROM zapisi;";
    db_exec(db1, stringUpChar(sqlQuery));

    sqlQuery = "";
    sqlQuery += "UPDATE radnici SET Status = 0;";
    db_exec(db1, stringUpChar(sqlQuery));
    return;
}

////////

uint8_t getFingerprintID() {
  uint8_t p = finger.getImage();
  switch (p) {
    case FINGERPRINT_OK:
      break;
    case FINGERPRINT_NOFINGER:
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      return p;
    case FINGERPRINT_IMAGEFAIL:
      return p;
    default:
      return p;
  }
  p = finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
      break;
    case FINGERPRINT_IMAGEMESS:
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      return p;
    case FINGERPRINT_FEATUREFAIL:
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      return p;
    default:
      return p;
  }
 
  p = finger.fingerFastSearch();
  if (p == FINGERPRINT_OK) {
    Serial.println("Found a print match!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_NOTFOUND) {
    Serial.println("Did not find a match");
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }   
  digitalWrite(diodaZaUlazak, HIGH);
  delay(2000); // neka se zna da je sve dobro proslo.
  digitalWrite(diodaZaUlazak, LOW);
  Serial.print("Found ID #"); Serial.print(finger.fingerID);
  Serial.print(" with confidence of "); Serial.println(finger.confidence); 
  //pamcenje ulaska u tabelu 'zapisi' i eventualno mijenjanje zbroja vremena.
  rc = openDb("/sd/bazaPodataka.db", &db1); //otvori.
    
  r.id = finger.fingerID; 
  
  generirajDatumIVrijeme(); 

  //na osnovu ID-ja, povuci informacije o radniku iz tabele radnici:
  Serial.println("evo me vratio sam se zivote...");    
  sqlQuery = "";
  sqlQuery += "SELECT * FROM radnici WHERE ID = " + String(r.id) + ";";
  Serial.print("generirana naredba: ");Serial.println(sqlQuery);//debug svrhe.
    
  rc = sqlite3_prepare_v2(db1, sqlQuery.c_str(), 1000, &res, &tail);
  if (rc == SQLITE_OK) {
    //0-ID i 4-sekunde nam ne trebaju sad.
    if (sqlite3_step(res) == SQLITE_ROW) { //0-indeksirano
        r.prezime = (const char *)(sqlite3_column_text(res, 1));
        r.ime = (const char *)(sqlite3_column_text(res, 2));
        r.aktivnost = sqlite3_column_int(res, 3);
    }
  }
  rc = sqlite3_reset(res); 
  sqlite3_finalize(res);

  if (r.aktivnost == 0) { //zapocinje sa zadatkom, nista ne update-ovati.
     //promijeni stanje u aktivan:
     sqlQuery = "";
     sqlQuery += "UPDATE radnici SET Status = 1 WHERE ID = " + String(r.id) + ";";  
     Serial.print("generirana sql naredba je :");
     Serial.println(sqlQuery); //debug.
        
     db_exec(db1, stringUpChar(sqlQuery));

     //insertaj u tabelu 'zapisi' novi log:
          
     sqlQuery = "";
     sqlQuery += "INSERT INTO zapisi VALUES (";
     sqlQuery += String(r.id) + ", '";
     sqlQuery += r.prezime + "', '";
     sqlQuery += r.ime + "', ";
     sqlQuery += String(d.dan) + ", " + String(d.mjesec) + ", " + String(d.godina) + ", '"; // ovdje ako bude nesto da ne valja provjeri kako su napisani, eto dole sam ja ispisivo poslje svake naredbe, samo provjeri.
     sqlQuery += String(v.sat) + ":" + String(v.minuta) + "', '-----', '-----');";     

     Serial.print("generirana sql naredba je :");
     Serial.println(sqlQuery); //debugging.
     db_exec(db1, stringUpChar(sqlQuery));
     
  } else { //zavrsio sa zadatkom, povecaj broj uradjenih zadataka.
     //ako je aktivan, prvo mu takodjer promijeni stanje u tabeli 'radnici':
     sqlQuery = "";
     //ovo je za pracenje aktivnosti, te da vidimo "ukupni" broj zadataka, te ukupno provedeno vremena u sistemu.
     //nema veze sto se resetuju zapisi i ukupna vremena i zadaci, imamo informacije u tabeli zvanoj 'mjeseci'.
     sqlQuery += "UPDATE radnici SET Status = 0, BrojZadataka = BrojZadataka + 1 WHERE ID = " + String(r.id) + ";";  

     Serial.print("generirana sql naredba je :");
     Serial.println(sqlQuery); // debug.
     db_exec(db1, stringUpChar(sqlQuery));

     //structovi za oduzimanje vremena:
     tmElements_t t1;
     tmElements_t t2;
     String mojeVrijeme = "";

     //oduzimamo vec zapamceno vrijeme od ovoga sad.
     t2.Day = d.dan;
     t2.Year = d.godina - 1970;
     t2.Month = d.mjesec;
     t2.Hour = v.sat;
     t2.Minute = v.minuta;
     t2.Second = 0;

     //vrati vrijeme ulaska jedinke iz tabele 'zapisi':
     //ovo je ono sto smo govorili, postoji samo jedna osoba ciji je id = ID i 
     //koja je u skladistu:
     //drugim rijecima, jedna osoba u ovom trenutku moze samo jednom biti u skladistu, ne moze dva puta.

     //update-aj vrijeme radnika:
     sqlQuery = "";
     sqlQuery += "SELECT * FROM zapisi WHERE ID = ";
     sqlQuery += String(r.id) + " AND datumOdlaska = '-----' AND vrijemeOdlaska = '-----';";     

     rc = sqlite3_prepare_v2(db1, sqlQuery.c_str(), 1000, &res, &tail);   
     if (rc == SQLITE_OK) {
        if (sqlite3_step(res) == SQLITE_ROW) {
            //0-id, 1-prezime, 2-ime - ne treba mi.
            Serial.println("dobro je ");
            t1.Day = sqlite3_column_int(res, 3);
            t1.Month = sqlite3_column_int(res, 4);
            t1.Year = sqlite3_column_int(res, 5) - 1970;                         
            t1.Second = 0;            
            mojeVrijeme = (const char *)(sqlite3_column_text(res, 6));     
        } else {
            Serial.println("pogreska kod sqlite3_step.");
        }
     }
     //ako sta ne bude uredu, isto provjeriti i te gore dobivene vrijednosti
     rc = sqlite3_reset(res);
     sqlite3_finalize(res);
     
     //konverzija stringa o vremenu u integere:
     t1.Hour = (mojeVrijeme.substring(0, mojeVrijeme.indexOf(":", 0))).toInt();
     t1.Minute = (mojeVrijeme.substring(mojeVrijeme.indexOf(":", 0) + 1, mojeVrijeme.length())).toInt();    

     Serial.println("vrijeme u obliku sati:minute je :"); //takodjer debug.
     Serial.print(t1.Hour);Serial.print(":");Serial.println(t1.Minute);
     
     uint32_t razlika = makeTime(t2) - makeTime(t1);
     ///maaaalo bolji nacin:     
     uint32_t t1Sekunde = (t1.Hour * 3600 + t1.Minute * 60);
     uint32_t t2Sekunde = (t2.Hour * 3600 + t2.Minute * 60);
     uint32_t razlika2 = t2Sekunde - t1Sekunde; 
       
     Serial.print("ovo je razlika u sekundama :");
     Serial.println(razlika);

     sqlQuery = "";
     sqlQuery += "UPDATE radnici SET Sekunde = Sekunde + ";
     sqlQuery += String(razlika2) + " WHERE ID = ";
     sqlQuery += String(r.id) + ";";

     db_exec(db1, stringUpChar(sqlQuery));

     Serial.print("generirani sql statement je :");
     Serial.println(sqlQuery); 

    //zamislimo da imamo tabelu sa sljedecim kolonama : ID|Prezime|Ime|Mjesec|Godina|Sekunde|BrojZadataka.
    //prvo treba povecati broj zadataka, a zatim i vrijeme, napraviti novi zapis samo ukoliko
    //vec ne postoji (to raditi sa IGNORE OR), gdje je unique key: ID, Prezime, Ime, Mjesec, Godina.
    ///insertaj prvi datum.
    sqlQuery = "";
    
    sqlQuery += "INSERT OR IGNORE INTO mjeseci (ID, Prezime, Ime, Mjesec, Godina, Sekunde, BrojZadataka) VALUES (";            
    sqlQuery += String(r.id) + ", '" + String(r.prezime) + "', '" + String(r.ime) + "', " + String(t1.Month) + ", " + String(t1.Year + 1970) + ", 0, 0);";

    Serial.println("generirani sql statement je :");
    Serial.println(sqlQuery);
    db_exec(db1, stringUpChar(sqlQuery));
    
    //ako su datumi različiti, insertaj i drugi.
    sqlQuery = "";
    
    sqlQuery += "INSERT OR IGNORE INTO mjeseci (ID, Prezime, Ime, Mjesec, Godina, Sekunde, BrojZadataka) VALUES (";            
    sqlQuery += String(r.id) + ", '" + String(r.prezime) + "', '" + String(r.ime) + "', " + String(t2.Month) + ", " + String(t2.Year + 1970) + ", 0, 0);";

    Serial.println("generirani sql statement je :");
    Serial.println(sqlQuery);
    db_exec(db1, stringUpChar(sqlQuery));
    
    //provjeri da li su datumi isti:
    if (t1.Month == t2.Month){ //ako su isti, treba update-ovati samo jedan datum.
        sqlQuery = "";
        sqlQuery += "UPDATE mjeseci SET Sekunde = Sekunde + " + String(razlika2) + ", BrojZadataka = BrojZadataka + 1 WHERE ID = " + String(r.id) + " AND Mjesec = " + String(d.mjesec) + " AND Godina = " + String(d.godina) + ";";       
        Serial.println("generirani sql statement je :");
        Serial.println(sqlQuery);
        db_exec(db1, stringUpChar(sqlQuery));        
    }else if (t1.Month != t2.Month) { //ako su različiti, treba updateovati obadva mjeseca.
        sqlQuery = "";
        sqlQuery += "UPDATE mjeseci SET Sekunde = Sekunde + " + String((24 * 3600 - t1Sekunde)) + ", BrojZadataka = BrojZadataka + 1 WHERE ID = " + String(r.id) + " AND Mjesec = " + String(t1.Month) + " AND Godina = " + String(t1.Year + 1970) + ";";
        Serial.println("generirani sql statement je :");
        Serial.println(sqlQuery);
        db_exec(db1, stringUpChar(sqlQuery));

        //sada updateovati i drugi:
        sqlQuery = "";
        sqlQuery += "UPDATE mjeseci SET Sekunde = Sekunde + " + String(t2Sekunde) + ", BrojZadataka = BrojZadataka + 1 WHERE ID = " + String(r.id) + " AND Mjesec = " + String(t2.Month) + " AND Godina = " + String(t2.Year + 1970) + ";";                      
        Serial.println("drugi sql statement koji je formiran je :");
        Serial.println(sqlQuery);
        db_exec(db1, stringUpChar(sqlQuery));
    }      
     
     //sada update-aj zapis u tabeli 'zapisi'
     sqlQuery = "";
     sqlQuery += "UPDATE zapisi SET datumOdlaska = '";
     sqlQuery += String(d.dan) + "." + String(d.mjesec) + "." + String(d.godina) + "', vrijemeOdlaska = '";
     sqlQuery += String(v.sat) + ":" + String(v.minuta) + "' WHERE ID = ";
     sqlQuery += String(r.id) + " AND datumOdlaska = '-----' AND vrijemeOdlaska = '-----';";      

     Serial.print("generirani sql je :");
     Serial.println(sqlQuery);
     
     db_exec(db1, stringUpChar(sqlQuery));
        
  }

  sqlite3_close(db1);   
  return finger.fingerID;
}

// returns -1 if failed, otherwise returns ID #
int getFingerprintIDez() {
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK)  return -1;
  
  // found a match!
  Serial.print("Found ID #"); Serial.print(finger.fingerID); 
  Serial.print(" with confidence of "); Serial.println(finger.confidence);

  //pamcenje radnika u 'zapisi' i eventualno update-ovanje ukupnih vremena  
  
  return finger.fingerID; 
}
uint8_t getFingerprintEnroll() {
  if (globalClient == NULL) { // ne treba sad, al za svaki slucaj.
    return 10; //return bilo sta osim 0
  }
  delay(500);
  Serial.println("Running on core: ");
  Serial.println(xPortGetCoreID());
  int p = -1;
  Serial.print("Waiting for valid finger to enroll as #"); Serial.println(id);
  String msg = "Waiting for valid finger to enroll as #";
  msg += String(id);
  globalClient->text(msg);
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      globalClient->text("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println(".");
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      break;
    default:
      Serial.println("Unknown error");
      break;
    }
  }

  // OK success!

  p = finger.image2Tz(1);
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }
  globalClient->text("Remove finger");
  Serial.println("Remove finger");
  delay(2000);
  p = 0;
  while (p != FINGERPRINT_NOFINGER) {
    p = finger.getImage();
  }
  Serial.print("ID "); Serial.println(id);
  p = -1;
  globalClient->text("Place same finger again");
  Serial.println("Place same finger again");
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.print(".");
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      break;
    default:
      Serial.println("Unknown error");
      break;
    }
  }

  // OK success!

  p = finger.image2Tz(2);
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }
  
  // OK converted!
  Serial.print("Creating model for #");  Serial.println(id);
  
  p = finger.createModel();
  if (p == FINGERPRINT_OK) {
    Serial.println("Prints matched!");
  } else {
        if (p == FINGERPRINT_PACKETRECIEVEERR) {
            Serial.println("Communication error");
            globalClient->text("Communication error");            
       } else if (p == FINGERPRINT_ENROLLMISMATCH) {
            Serial.println("Fingerprints did not match");
            globalClient->text("Fingerprints did not match");            
       } else {
            Serial.println("Unknown error");
            globalClient->text("Unknown error");
       }
       delay(2000);
       globalClient->text("Trying again");
       for (int i = 0;i < 5; i++) {
            globalClient->text(".");
            delay(1000);
       }
       delay(1000);       
       return 0;
  }
  Serial.print("ID "); Serial.println(id);
  p = finger.storeModel(id);
  if (p == FINGERPRINT_OK) {
    globalClient->text("Stored");
    delay(1000);
    globalClient->text("Redirecting");
    for (int i = 0; i < 5; i++) {
        globalClient->text(".");
        delay(1000);
    }
    Serial.println("Stored!");
    globalClient->text("redirect");
    return 1;
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    globalClient->text("Communication error");
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
    globalClient->text("Could not store in that location");
    Serial.println("Could not store in that location");
    return p;
  } else if (p == FINGERPRINT_FLASHERR) {
    globalClient->text("Error writing to flash");
    Serial.println("Error writing to flash");
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }   
}

//pogledaj dolje, u ws_event_handleru ima promjena!
static int callback(void *data, int argc, char **argv, char **azColName){
   int i;
   Serial.printf("%s: ", (const char*)data);
   Serial.println("CALLBACK FUNCTION CALLED");
   for (i = 0; i<argc; i++){
       Serial.printf("%s = %s\n", azColName[i], argv[i] ? argv[i] : "NULL");
       db_row[i] = argv[i];
   }
   Serial.printf("\n");
   return 0;
}

int openDb(const char *filename, sqlite3 **db) {
   int rc = sqlite3_open(filename, db);
   if (rc) {
       Serial.printf("Can't open database: %s\n", sqlite3_errmsg(*db));
       return rc;
   } else {
       Serial.printf("Opened database successfully\n");
   }
   return rc;
}

char *zErrMsg = 0;
int db_exec(sqlite3 *db, const char *sql) {
   Serial.println(sql);
   long start = micros();
   int rc = sqlite3_exec(db, sql, callback, (void*)data, &zErrMsg);
   if (rc != SQLITE_OK) {
       Serial.printf("SQL error: %s\n", zErrMsg);
       sqlite3_free(zErrMsg);
   } else {
       Serial.printf("Operation done successfully\n");
   }
   Serial.print(F("Time taken:"));
   Serial.println(micros()-start);
   return rc;
}

void onWsEvent(AsyncWebSocket * server, AsyncWebSocketClient * client, AwsEventType type, void * arg, uint8_t *data, size_t len){
  double ukupnoSekundi = 0.00;    
  int brojZadataka = 0;  
  if(type == WS_EVT_CONNECT){
    Serial.println("Konekcija sa klijentom ostvarena.");
    if (upisivanje == 1) {
        posluzioEnroll = true;
        globalClient = client; //znam da mi je enroll.
    } else if (vratiNajefikasnije) { // to znaci da trebam da vratim najefikasnije.
        vratiNajefikasnije = false; // resetiraj varijablu za primjecivanje promjene.

        rc = openDb("/sd/bazaPodataka.db", &db1); //otvori.
        
        sqlQuery = "";
        sqlQuery += "SELECT * FROM mjeseci WHERE Sekunde != 0 AND BrojZadataka != 0 AND ((Sekunde/3600)/BrojZadataka) <= " + String(satiPoZadatku) + " AND ";
        if (r.id == -1)
            sqlQuery += "ID != " + String(maxRadnika) + " AND ";
        else
            sqlQuery += "ID = " + String(r.id) + " AND ";

        if (r.prezime == "")
            sqlQuery += "Prezime != '' AND ";
        else
            sqlQuery += "UPPER(Prezime) = UPPER('" + String(r.prezime) + "') AND ";                                            

        if (r.ime == "")
            sqlQuery += "Ime != '' AND ";
        else
            sqlQuery += "UPPER(Ime) = UPPER('" + String(r.ime) + "') AND ";

        sqlQuery += "Godina = " + String(d.godina) + " AND Mjesec = " + String(d.mjesec) + ";";                
        
        Serial.println("generirana sql naredba je :");
        Serial.println(sqlQuery); //for debugging purposes.
        String p = "";        
        rc = sqlite3_prepare_v2(db1, sqlQuery.c_str(), 1000, &res, &tail);  

        if (rc != SQLITE_OK) {
            Serial.println("greska prilikom pripremanja vrijednosti.");
        } else {            
            double efikasn = 0.00;
            while(sqlite3_step(res) == SQLITE_ROW) { // salji klijentu vrijednosti.
                p = "";
                p += String(sqlite3_column_int(res, 0)) + "|" + (const char *)(sqlite3_column_text(res, 1)) + "|" + (const char *)(sqlite3_column_text(res, 2)) + "|";
                ukupnoSekundi = sqlite3_column_double(res, 5);
                brojZadataka = sqlite3_column_int(res, 6);
                
                if (brojZadataka == 0)
                    efikasn = 10000.00;
                else
                    efikasn = (ukupnoSekundi/3600)/brojZadataka;
                    
                p += String(efikasn, 2);
                client->text(p);
                Serial.println("Ovo je generirani sql statement:");
                Serial.println(p);
            }
            
        }
        rc = sqlite3_reset(res);
        sqlite3_finalize(res);

        sqlite3_close(db1);
    } else if (vratiHistoriju) { // vracam historiju efikasnosti.
        vratiHistoriju = false;

        //napraviti sql i tabelu u bazi podataka.            
        //ime tabele: historija.
        //ime kolona:ID, Prezime, Ime, Mjesec, Godina, Sekunde, BrojZadataka - nova tabela - mjeseci..
        formirajSqlHistorija(); // formiram sql.

        rc = openDb("/sd/bazaPodataka.db", &db1); //otvori.

        rc = sqlite3_prepare_v2(db1, sqlQuery.c_str(), 1000, &res, &tail);  

        if (rc != SQLITE_OK) {
            Serial.println("nesto nije u redu...");
        } else {
            String a = "";
            double efikasn = 0.000;
            while (sqlite3_step(res) == SQLITE_ROW) {
                a = "";
                a += String(sqlite3_column_int(res, 0)) + "|" + (const char *)(sqlite3_column_text(res, 1)) + "|" + (const char *)(sqlite3_column_text(res, 2)) + "|";
                d.mjesec = sqlite3_column_int(res, 3);
                d.godina = sqlite3_column_int(res, 4);
                ukupnoSekundi = sqlite3_column_double(res, 5);
                brojZadataka = sqlite3_column_int(res, 6);
                
                if (brojZadataka == 0)
                    efikasn = 0.00;
                else
                    efikasn = (ukupnoSekundi/3600)/brojZadataka;
                    
                a += formirajDatum(d.mjesec, d.godina) + "|" + String(efikasn, 2);
                client->text(a);
                Serial.println("ovo je generirana poruka:");
                Serial.println(a);
            }
        }

        rc = sqlite3_reset(res);
        sqlite3_finalize(res);

        sqlite3_close(db1);
    }
  } else if(type == WS_EVT_DISCONNECT){
    Serial.println("Konekcija sa klijentom izgubljena.");
    globalClient = NULL;

  } else if (type == WS_EVT_DATA) {
    //ako sam primio informacije od različitih stranica, raspitaj se koja je koja:
    String poruka = "";
    String odgovor = "";
    for (int i = 0; i < len; i++) 
        poruka = poruka + (char)data[i];

    Serial.print("primljena poruka je :");
    Serial.println(poruka);

    rc = openDb("/sd/bazaPodataka.db", &db1); //otvori.
    
    if (poruka == "zapisi" && vratiZapise == true) {
        vratiZapise = false;

        generirajUpitZapisi();

        Serial.print("ovo je generirana sql naredba: ");
        Serial.println(sqlQuery);

        rc = sqlite3_prepare_v2(db1, sqlQuery.c_str(), 1000, &res, &tail);                      

        if (rc != SQLITE_OK) {
            Serial.println("nisam uspio pripremiti povratne informacije");                           
        } else {
            while(sqlite3_step(res) == SQLITE_ROW) {
                odgovor = "";
                odgovor += String(sqlite3_column_int(res, 0)) + "|" + (const char *)(sqlite3_column_text(res, 1)) + "|" + (const char *)(sqlite3_column_text(res, 2)) + "|";
                odgovor += String(sqlite3_column_int(res, 3)) + "." + String(sqlite3_column_int(res, 4)) + "." + String(sqlite3_column_int(res, 5)) + "|" + (const char *)(sqlite3_column_text(res, 6)) + "|" + (const char *)(sqlite3_column_text(res, 7)) + "|" + (const char*)(sqlite3_column_text(res, 8));
                client->text(odgovor);    
                Serial.println("poslani upit je :");
                Serial.println(odgovor);
            }
        }
        rc = sqlite3_reset(res);
        sqlite3_finalize(res);
    } else if (obrisiZapise == true && poruka == "zapisi") {
        obrisiZapise = false;
        resetujZapise();
        client->text("obrisani zapisi"); // ako ne moze ovo, onda probaj "obrisani zapisi" da posaljes.
    } else if (vratiKorisnike == true && poruka == "korisnici") {
        vratiKorisnike = false;

        generirajUpitRadnici();

        Serial.println("generirani query u 'korisnici' je : ");
        Serial.println(sqlQuery);

        rc = sqlite3_prepare_v2(db1, sqlQuery.c_str(), 1000, &res, &tail);

        if (rc != SQLITE_OK) {
            Serial.println("nisam upsio pripremiti povratnu vrijednost");
        } else {
            while (sqlite3_step(res) == SQLITE_ROW) {
                odgovor = "";
                odgovor += String(sqlite3_column_int(res, 0)) + "|" + (const char *)(sqlite3_column_text(res, 1)) + "|" + (const char *)(sqlite3_column_text(res, 2)) + "|";   
                byte a = sqlite3_column_int(res, 3);
                uint64_t vremeSekunde = sqlite3_column_double(res, 4);
                uint32_t brojZad = sqlite3_column_int(res, 5);
                String aktivan = "";
                if (a == 1) {
                    aktivan = "Still working on task";
                } else {
                    aktivan = "Task Finished";
                }
                               
                uint32_t sahati = (vremeSekunde / 3600);
                vremeSekunde = vremeSekunde % 3600;
                uint32_t minutee = vremeSekunde / 60;
                uint32_t s = vremeSekunde % 60;

                String vri = String(sahati) + ":" + String(minutee) + ":" + String(s);

                odgovor += aktivan + "|" + vri + "|" + String(brojZad);

                client->text(odgovor);

                Serial.println("poslani upit je :");
                Serial.println(odgovor);
                odgovor = "";
            }
        }
        rc = sqlite3_reset(res);
        sqlite3_finalize(res);
    } else if (obrisiVremena == true && poruka == "korisnici") {
        obrisiVremena = false;
        resetujVremena();
        Serial.println("vremena korisnika resetirana");
        client->text("obrisana vremena");
    }

    sqlite3_close(db1);    
  }
}
